// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc3
// source: internal/server/api/proto/gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClusterGateway_ID_FullMethodName                       = "/gateway.ClusterGateway/ID"
	ClusterGateway_RemoveHost_FullMethodName               = "/gateway.ClusterGateway/RemoveHost"
	ClusterGateway_MigrateKernelReplica_FullMethodName     = "/gateway.ClusterGateway/MigrateKernelReplica"
	ClusterGateway_NotifyKernelRegistered_FullMethodName   = "/gateway.ClusterGateway/NotifyKernelRegistered"
	ClusterGateway_SmrReady_FullMethodName                 = "/gateway.ClusterGateway/SmrReady"
	ClusterGateway_SmrNodeAdded_FullMethodName             = "/gateway.ClusterGateway/SmrNodeAdded"
	ClusterGateway_ListKernels_FullMethodName              = "/gateway.ClusterGateway/ListKernels"
	ClusterGateway_SetTotalVirtualGPUs_FullMethodName      = "/gateway.ClusterGateway/SetTotalVirtualGPUs"
	ClusterGateway_GetClusterGpuInfo_FullMethodName        = "/gateway.ClusterGateway/GetClusterGpuInfo"
	ClusterGateway_GetClusterVirtualGpuInfo_FullMethodName = "/gateway.ClusterGateway/GetClusterVirtualGpuInfo"
)

// ClusterGatewayClient is the client API for ClusterGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterGatewayClient interface {
	// ID returns the cluster gateway id and can be used to test connectivity.
	ID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ProvisionerId, error)
	// RemoveHost removes a local gateway from the cluster.
	RemoveHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Void, error)
	// MigrateKernelReplica selects a qualified host and adds a kernel replica to the replica set.
	// Unlike StartKernelReplica, a new replica is added to the replica set and a training task may
	// need to start immediately after replica started, e.g., preempting a training task.
	//
	// The function will simply remove the replica from the kernel without stopping it.
	// The caller should stop the replica after confirmed that the new replica is ready.
	MigrateKernelReplica(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*MigrateKernelResponse, error)
	// Notify the Gateway that a distributed kernel replica has started somewhere.
	NotifyKernelRegistered(ctx context.Context, in *KernelRegistrationNotification, opts ...grpc.CallOption) (*KernelRegistrationNotificationResponse, error)
	SmrReady(ctx context.Context, in *SmrReadyNotification, opts ...grpc.CallOption) (*Void, error)
	SmrNodeAdded(ctx context.Context, in *ReplicaInfo, opts ...grpc.CallOption) (*Void, error)
	// Return a list of all of the current kernel IDs.
	ListKernels(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListKernelsResponse, error)
	// Set the maximum number of vGPU resources availabe on a particular node (identified by the local daemon).
	SetTotalVirtualGPUs(ctx context.Context, in *SetVirtualGPUsRequest, opts ...grpc.CallOption) (*VirtualGpuInfo, error)
	// Return the current GPU resource metrics on the node.
	GetClusterGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterActualGpuInfo, error)
	// Return the current vGPU (or "deflated GPU") resource metrics on the node.
	GetClusterVirtualGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterVirtualGpuInfo, error)
}

type clusterGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterGatewayClient(cc grpc.ClientConnInterface) ClusterGatewayClient {
	return &clusterGatewayClient{cc}
}

func (c *clusterGatewayClient) ID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ProvisionerId, error) {
	out := new(ProvisionerId)
	err := c.cc.Invoke(ctx, ClusterGateway_ID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) RemoveHost(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, ClusterGateway_RemoveHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) MigrateKernelReplica(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*MigrateKernelResponse, error) {
	out := new(MigrateKernelResponse)
	err := c.cc.Invoke(ctx, ClusterGateway_MigrateKernelReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) NotifyKernelRegistered(ctx context.Context, in *KernelRegistrationNotification, opts ...grpc.CallOption) (*KernelRegistrationNotificationResponse, error) {
	out := new(KernelRegistrationNotificationResponse)
	err := c.cc.Invoke(ctx, ClusterGateway_NotifyKernelRegistered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) SmrReady(ctx context.Context, in *SmrReadyNotification, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, ClusterGateway_SmrReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) SmrNodeAdded(ctx context.Context, in *ReplicaInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, ClusterGateway_SmrNodeAdded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) ListKernels(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListKernelsResponse, error) {
	out := new(ListKernelsResponse)
	err := c.cc.Invoke(ctx, ClusterGateway_ListKernels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) SetTotalVirtualGPUs(ctx context.Context, in *SetVirtualGPUsRequest, opts ...grpc.CallOption) (*VirtualGpuInfo, error) {
	out := new(VirtualGpuInfo)
	err := c.cc.Invoke(ctx, ClusterGateway_SetTotalVirtualGPUs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) GetClusterGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterActualGpuInfo, error) {
	out := new(ClusterActualGpuInfo)
	err := c.cc.Invoke(ctx, ClusterGateway_GetClusterGpuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterGatewayClient) GetClusterVirtualGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClusterVirtualGpuInfo, error) {
	out := new(ClusterVirtualGpuInfo)
	err := c.cc.Invoke(ctx, ClusterGateway_GetClusterVirtualGpuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterGatewayServer is the server API for ClusterGateway service.
// All implementations must embed UnimplementedClusterGatewayServer
// for forward compatibility
type ClusterGatewayServer interface {
	// ID returns the cluster gateway id and can be used to test connectivity.
	ID(context.Context, *Void) (*ProvisionerId, error)
	// RemoveHost removes a local gateway from the cluster.
	RemoveHost(context.Context, *HostId) (*Void, error)
	// MigrateKernelReplica selects a qualified host and adds a kernel replica to the replica set.
	// Unlike StartKernelReplica, a new replica is added to the replica set and a training task may
	// need to start immediately after replica started, e.g., preempting a training task.
	//
	// The function will simply remove the replica from the kernel without stopping it.
	// The caller should stop the replica after confirmed that the new replica is ready.
	MigrateKernelReplica(context.Context, *MigrationRequest) (*MigrateKernelResponse, error)
	// Notify the Gateway that a distributed kernel replica has started somewhere.
	NotifyKernelRegistered(context.Context, *KernelRegistrationNotification) (*KernelRegistrationNotificationResponse, error)
	SmrReady(context.Context, *SmrReadyNotification) (*Void, error)
	SmrNodeAdded(context.Context, *ReplicaInfo) (*Void, error)
	// Return a list of all of the current kernel IDs.
	ListKernels(context.Context, *Void) (*ListKernelsResponse, error)
	// Set the maximum number of vGPU resources availabe on a particular node (identified by the local daemon).
	SetTotalVirtualGPUs(context.Context, *SetVirtualGPUsRequest) (*VirtualGpuInfo, error)
	// Return the current GPU resource metrics on the node.
	GetClusterGpuInfo(context.Context, *Void) (*ClusterActualGpuInfo, error)
	// Return the current vGPU (or "deflated GPU") resource metrics on the node.
	GetClusterVirtualGpuInfo(context.Context, *Void) (*ClusterVirtualGpuInfo, error)
	mustEmbedUnimplementedClusterGatewayServer()
}

// UnimplementedClusterGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedClusterGatewayServer struct {
}

func (UnimplementedClusterGatewayServer) ID(context.Context, *Void) (*ProvisionerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ID not implemented")
}
func (UnimplementedClusterGatewayServer) RemoveHost(context.Context, *HostId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHost not implemented")
}
func (UnimplementedClusterGatewayServer) MigrateKernelReplica(context.Context, *MigrationRequest) (*MigrateKernelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateKernelReplica not implemented")
}
func (UnimplementedClusterGatewayServer) NotifyKernelRegistered(context.Context, *KernelRegistrationNotification) (*KernelRegistrationNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyKernelRegistered not implemented")
}
func (UnimplementedClusterGatewayServer) SmrReady(context.Context, *SmrReadyNotification) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmrReady not implemented")
}
func (UnimplementedClusterGatewayServer) SmrNodeAdded(context.Context, *ReplicaInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmrNodeAdded not implemented")
}
func (UnimplementedClusterGatewayServer) ListKernels(context.Context, *Void) (*ListKernelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKernels not implemented")
}
func (UnimplementedClusterGatewayServer) SetTotalVirtualGPUs(context.Context, *SetVirtualGPUsRequest) (*VirtualGpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTotalVirtualGPUs not implemented")
}
func (UnimplementedClusterGatewayServer) GetClusterGpuInfo(context.Context, *Void) (*ClusterActualGpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterGpuInfo not implemented")
}
func (UnimplementedClusterGatewayServer) GetClusterVirtualGpuInfo(context.Context, *Void) (*ClusterVirtualGpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterVirtualGpuInfo not implemented")
}
func (UnimplementedClusterGatewayServer) mustEmbedUnimplementedClusterGatewayServer() {}

// UnsafeClusterGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterGatewayServer will
// result in compilation errors.
type UnsafeClusterGatewayServer interface {
	mustEmbedUnimplementedClusterGatewayServer()
}

func RegisterClusterGatewayServer(s grpc.ServiceRegistrar, srv ClusterGatewayServer) {
	s.RegisterService(&ClusterGateway_ServiceDesc, srv)
}

func _ClusterGateway_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_ID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).ID(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_RemoveHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).RemoveHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_RemoveHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).RemoveHost(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_MigrateKernelReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).MigrateKernelReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_MigrateKernelReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).MigrateKernelReplica(ctx, req.(*MigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_NotifyKernelRegistered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelRegistrationNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).NotifyKernelRegistered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_NotifyKernelRegistered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).NotifyKernelRegistered(ctx, req.(*KernelRegistrationNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_SmrReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmrReadyNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).SmrReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_SmrReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).SmrReady(ctx, req.(*SmrReadyNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_SmrNodeAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).SmrNodeAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_SmrNodeAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).SmrNodeAdded(ctx, req.(*ReplicaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_ListKernels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).ListKernels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_ListKernels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).ListKernels(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_SetTotalVirtualGPUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVirtualGPUsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).SetTotalVirtualGPUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_SetTotalVirtualGPUs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).SetTotalVirtualGPUs(ctx, req.(*SetVirtualGPUsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_GetClusterGpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).GetClusterGpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_GetClusterGpuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).GetClusterGpuInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterGateway_GetClusterVirtualGpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterGatewayServer).GetClusterVirtualGpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterGateway_GetClusterVirtualGpuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterGatewayServer).GetClusterVirtualGpuInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterGateway_ServiceDesc is the grpc.ServiceDesc for ClusterGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.ClusterGateway",
	HandlerType: (*ClusterGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _ClusterGateway_ID_Handler,
		},
		{
			MethodName: "RemoveHost",
			Handler:    _ClusterGateway_RemoveHost_Handler,
		},
		{
			MethodName: "MigrateKernelReplica",
			Handler:    _ClusterGateway_MigrateKernelReplica_Handler,
		},
		{
			MethodName: "NotifyKernelRegistered",
			Handler:    _ClusterGateway_NotifyKernelRegistered_Handler,
		},
		{
			MethodName: "SmrReady",
			Handler:    _ClusterGateway_SmrReady_Handler,
		},
		{
			MethodName: "SmrNodeAdded",
			Handler:    _ClusterGateway_SmrNodeAdded_Handler,
		},
		{
			MethodName: "ListKernels",
			Handler:    _ClusterGateway_ListKernels_Handler,
		},
		{
			MethodName: "SetTotalVirtualGPUs",
			Handler:    _ClusterGateway_SetTotalVirtualGPUs_Handler,
		},
		{
			MethodName: "GetClusterGpuInfo",
			Handler:    _ClusterGateway_GetClusterGpuInfo_Handler,
		},
		{
			MethodName: "GetClusterVirtualGpuInfo",
			Handler:    _ClusterGateway_GetClusterVirtualGpuInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/api/proto/gateway.proto",
}

const (
	LocalGateway_SetID_FullMethodName                    = "/gateway.LocalGateway/SetID"
	LocalGateway_StartKernel_FullMethodName              = "/gateway.LocalGateway/StartKernel"
	LocalGateway_StartKernelReplica_FullMethodName       = "/gateway.LocalGateway/StartKernelReplica"
	LocalGateway_GetKernelStatus_FullMethodName          = "/gateway.LocalGateway/GetKernelStatus"
	LocalGateway_KillKernel_FullMethodName               = "/gateway.LocalGateway/KillKernel"
	LocalGateway_StopKernel_FullMethodName               = "/gateway.LocalGateway/StopKernel"
	LocalGateway_WaitKernel_FullMethodName               = "/gateway.LocalGateway/WaitKernel"
	LocalGateway_SetClose_FullMethodName                 = "/gateway.LocalGateway/SetClose"
	LocalGateway_AddReplica_FullMethodName               = "/gateway.LocalGateway/AddReplica"
	LocalGateway_UpdateReplicaAddr_FullMethodName        = "/gateway.LocalGateway/UpdateReplicaAddr"
	LocalGateway_PrepareToMigrate_FullMethodName         = "/gateway.LocalGateway/PrepareToMigrate"
	LocalGateway_GetActualGpuInfo_FullMethodName         = "/gateway.LocalGateway/GetActualGpuInfo"
	LocalGateway_GetVirtualGpuInfo_FullMethodName        = "/gateway.LocalGateway/GetVirtualGpuInfo"
	LocalGateway_SetTotalVirtualGPUs_FullMethodName      = "/gateway.LocalGateway/SetTotalVirtualGPUs"
	LocalGateway_GetVirtualGpuAllocations_FullMethodName = "/gateway.LocalGateway/GetVirtualGpuAllocations"
)

// LocalGatewayClient is the client API for LocalGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalGatewayClient interface {
	// SetID sets the local gatway id and return old id for failure tolerance.
	SetID(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*HostId, error)
	// StartKernel a kernel or kernel replica.
	StartKernel(ctx context.Context, in *KernelSpec, opts ...grpc.CallOption) (*KernelConnectionInfo, error)
	// StartKernelReplica starts a kernel replica on the local host.
	StartKernelReplica(ctx context.Context, in *KernelReplicaSpec, opts ...grpc.CallOption) (*KernelConnectionInfo, error)
	// GetKernelStatus returns the status of a kernel.
	GetKernelStatus(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error)
	// KillKernel kills a kernel.
	KillKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error)
	// StopKernel stops a kernel gracefully and return immediately.
	StopKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error)
	// WaitKernel waits for a kernel to stop and return status.
	WaitKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error)
	// SetClose request the gateway to close all kernels and stop.
	SetClose(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Used to instruct a set of kernel replicas to add a new node to their SMR cluster.
	AddReplica(ctx context.Context, in *ReplicaInfoWithAddr, opts ...grpc.CallOption) (*Void, error)
	// Used to instruct a set of kernel replicas to update the peer address of a particular node.
	// This is primarily used during migrations.
	UpdateReplicaAddr(ctx context.Context, in *ReplicaInfoWithAddr, opts ...grpc.CallOption) (*Void, error)
	// Used to instruct a specific kernel replica to prepare to be migrated to a new node.
	// This involves writing the contents of the etcd-raft data directory to HDFS so that
	// it can be read back from HDFS by the new replica.
	PrepareToMigrate(ctx context.Context, in *ReplicaInfo, opts ...grpc.CallOption) (*PrepareToMigrateResponse, error)
	// Return the current GPU resource metrics on the node.
	GetActualGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GpuInfo, error)
	// Return the current vGPU (or "deflated GPU") resource metrics on the node.
	GetVirtualGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*VirtualGpuInfo, error)
	// Set the maximum number of vGPU resources availabe on the node.
	SetTotalVirtualGPUs(ctx context.Context, in *SetVirtualGPUsRequest, opts ...grpc.CallOption) (*VirtualGpuInfo, error)
	// Return the current vGPU allocations on this node.
	GetVirtualGpuAllocations(ctx context.Context, in *Void, opts ...grpc.CallOption) (*VirtualGpuAllocations, error)
}

type localGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalGatewayClient(cc grpc.ClientConnInterface) LocalGatewayClient {
	return &localGatewayClient{cc}
}

func (c *localGatewayClient) SetID(ctx context.Context, in *HostId, opts ...grpc.CallOption) (*HostId, error) {
	out := new(HostId)
	err := c.cc.Invoke(ctx, LocalGateway_SetID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) StartKernel(ctx context.Context, in *KernelSpec, opts ...grpc.CallOption) (*KernelConnectionInfo, error) {
	out := new(KernelConnectionInfo)
	err := c.cc.Invoke(ctx, LocalGateway_StartKernel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) StartKernelReplica(ctx context.Context, in *KernelReplicaSpec, opts ...grpc.CallOption) (*KernelConnectionInfo, error) {
	out := new(KernelConnectionInfo)
	err := c.cc.Invoke(ctx, LocalGateway_StartKernelReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) GetKernelStatus(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error) {
	out := new(KernelStatus)
	err := c.cc.Invoke(ctx, LocalGateway_GetKernelStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) KillKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LocalGateway_KillKernel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) StopKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LocalGateway_StopKernel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) WaitKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error) {
	out := new(KernelStatus)
	err := c.cc.Invoke(ctx, LocalGateway_WaitKernel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) SetClose(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LocalGateway_SetClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) AddReplica(ctx context.Context, in *ReplicaInfoWithAddr, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LocalGateway_AddReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) UpdateReplicaAddr(ctx context.Context, in *ReplicaInfoWithAddr, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LocalGateway_UpdateReplicaAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) PrepareToMigrate(ctx context.Context, in *ReplicaInfo, opts ...grpc.CallOption) (*PrepareToMigrateResponse, error) {
	out := new(PrepareToMigrateResponse)
	err := c.cc.Invoke(ctx, LocalGateway_PrepareToMigrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) GetActualGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GpuInfo, error) {
	out := new(GpuInfo)
	err := c.cc.Invoke(ctx, LocalGateway_GetActualGpuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) GetVirtualGpuInfo(ctx context.Context, in *Void, opts ...grpc.CallOption) (*VirtualGpuInfo, error) {
	out := new(VirtualGpuInfo)
	err := c.cc.Invoke(ctx, LocalGateway_GetVirtualGpuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) SetTotalVirtualGPUs(ctx context.Context, in *SetVirtualGPUsRequest, opts ...grpc.CallOption) (*VirtualGpuInfo, error) {
	out := new(VirtualGpuInfo)
	err := c.cc.Invoke(ctx, LocalGateway_SetTotalVirtualGPUs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) GetVirtualGpuAllocations(ctx context.Context, in *Void, opts ...grpc.CallOption) (*VirtualGpuAllocations, error) {
	out := new(VirtualGpuAllocations)
	err := c.cc.Invoke(ctx, LocalGateway_GetVirtualGpuAllocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalGatewayServer is the server API for LocalGateway service.
// All implementations must embed UnimplementedLocalGatewayServer
// for forward compatibility
type LocalGatewayServer interface {
	// SetID sets the local gatway id and return old id for failure tolerance.
	SetID(context.Context, *HostId) (*HostId, error)
	// StartKernel a kernel or kernel replica.
	StartKernel(context.Context, *KernelSpec) (*KernelConnectionInfo, error)
	// StartKernelReplica starts a kernel replica on the local host.
	StartKernelReplica(context.Context, *KernelReplicaSpec) (*KernelConnectionInfo, error)
	// GetKernelStatus returns the status of a kernel.
	GetKernelStatus(context.Context, *KernelId) (*KernelStatus, error)
	// KillKernel kills a kernel.
	KillKernel(context.Context, *KernelId) (*Void, error)
	// StopKernel stops a kernel gracefully and return immediately.
	StopKernel(context.Context, *KernelId) (*Void, error)
	// WaitKernel waits for a kernel to stop and return status.
	WaitKernel(context.Context, *KernelId) (*KernelStatus, error)
	// SetClose request the gateway to close all kernels and stop.
	SetClose(context.Context, *Void) (*Void, error)
	// Used to instruct a set of kernel replicas to add a new node to their SMR cluster.
	AddReplica(context.Context, *ReplicaInfoWithAddr) (*Void, error)
	// Used to instruct a set of kernel replicas to update the peer address of a particular node.
	// This is primarily used during migrations.
	UpdateReplicaAddr(context.Context, *ReplicaInfoWithAddr) (*Void, error)
	// Used to instruct a specific kernel replica to prepare to be migrated to a new node.
	// This involves writing the contents of the etcd-raft data directory to HDFS so that
	// it can be read back from HDFS by the new replica.
	PrepareToMigrate(context.Context, *ReplicaInfo) (*PrepareToMigrateResponse, error)
	// Return the current GPU resource metrics on the node.
	GetActualGpuInfo(context.Context, *Void) (*GpuInfo, error)
	// Return the current vGPU (or "deflated GPU") resource metrics on the node.
	GetVirtualGpuInfo(context.Context, *Void) (*VirtualGpuInfo, error)
	// Set the maximum number of vGPU resources availabe on the node.
	SetTotalVirtualGPUs(context.Context, *SetVirtualGPUsRequest) (*VirtualGpuInfo, error)
	// Return the current vGPU allocations on this node.
	GetVirtualGpuAllocations(context.Context, *Void) (*VirtualGpuAllocations, error)
	mustEmbedUnimplementedLocalGatewayServer()
}

// UnimplementedLocalGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedLocalGatewayServer struct {
}

func (UnimplementedLocalGatewayServer) SetID(context.Context, *HostId) (*HostId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetID not implemented")
}
func (UnimplementedLocalGatewayServer) StartKernel(context.Context, *KernelSpec) (*KernelConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKernel not implemented")
}
func (UnimplementedLocalGatewayServer) StartKernelReplica(context.Context, *KernelReplicaSpec) (*KernelConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKernelReplica not implemented")
}
func (UnimplementedLocalGatewayServer) GetKernelStatus(context.Context, *KernelId) (*KernelStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKernelStatus not implemented")
}
func (UnimplementedLocalGatewayServer) KillKernel(context.Context, *KernelId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillKernel not implemented")
}
func (UnimplementedLocalGatewayServer) StopKernel(context.Context, *KernelId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopKernel not implemented")
}
func (UnimplementedLocalGatewayServer) WaitKernel(context.Context, *KernelId) (*KernelStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitKernel not implemented")
}
func (UnimplementedLocalGatewayServer) SetClose(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClose not implemented")
}
func (UnimplementedLocalGatewayServer) AddReplica(context.Context, *ReplicaInfoWithAddr) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplica not implemented")
}
func (UnimplementedLocalGatewayServer) UpdateReplicaAddr(context.Context, *ReplicaInfoWithAddr) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplicaAddr not implemented")
}
func (UnimplementedLocalGatewayServer) PrepareToMigrate(context.Context, *ReplicaInfo) (*PrepareToMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareToMigrate not implemented")
}
func (UnimplementedLocalGatewayServer) GetActualGpuInfo(context.Context, *Void) (*GpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActualGpuInfo not implemented")
}
func (UnimplementedLocalGatewayServer) GetVirtualGpuInfo(context.Context, *Void) (*VirtualGpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualGpuInfo not implemented")
}
func (UnimplementedLocalGatewayServer) SetTotalVirtualGPUs(context.Context, *SetVirtualGPUsRequest) (*VirtualGpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTotalVirtualGPUs not implemented")
}
func (UnimplementedLocalGatewayServer) GetVirtualGpuAllocations(context.Context, *Void) (*VirtualGpuAllocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualGpuAllocations not implemented")
}
func (UnimplementedLocalGatewayServer) mustEmbedUnimplementedLocalGatewayServer() {}

// UnsafeLocalGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalGatewayServer will
// result in compilation errors.
type UnsafeLocalGatewayServer interface {
	mustEmbedUnimplementedLocalGatewayServer()
}

func RegisterLocalGatewayServer(s grpc.ServiceRegistrar, srv LocalGatewayServer) {
	s.RegisterService(&LocalGateway_ServiceDesc, srv)
}

func _LocalGateway_SetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).SetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_SetID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).SetID(ctx, req.(*HostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_StartKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).StartKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_StartKernel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).StartKernel(ctx, req.(*KernelSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_StartKernelReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelReplicaSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).StartKernelReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_StartKernelReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).StartKernelReplica(ctx, req.(*KernelReplicaSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_GetKernelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).GetKernelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_GetKernelStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).GetKernelStatus(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_KillKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).KillKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_KillKernel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).KillKernel(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_StopKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).StopKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_StopKernel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).StopKernel(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_WaitKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).WaitKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_WaitKernel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).WaitKernel(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_SetClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).SetClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_SetClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).SetClose(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_AddReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaInfoWithAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).AddReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_AddReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).AddReplica(ctx, req.(*ReplicaInfoWithAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_UpdateReplicaAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaInfoWithAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).UpdateReplicaAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_UpdateReplicaAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).UpdateReplicaAddr(ctx, req.(*ReplicaInfoWithAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_PrepareToMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).PrepareToMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_PrepareToMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).PrepareToMigrate(ctx, req.(*ReplicaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_GetActualGpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).GetActualGpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_GetActualGpuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).GetActualGpuInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_GetVirtualGpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).GetVirtualGpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_GetVirtualGpuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).GetVirtualGpuInfo(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_SetTotalVirtualGPUs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVirtualGPUsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).SetTotalVirtualGPUs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_SetTotalVirtualGPUs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).SetTotalVirtualGPUs(ctx, req.(*SetVirtualGPUsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_GetVirtualGpuAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).GetVirtualGpuAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalGateway_GetVirtualGpuAllocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).GetVirtualGpuAllocations(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalGateway_ServiceDesc is the grpc.ServiceDesc for LocalGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.LocalGateway",
	HandlerType: (*LocalGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetID",
			Handler:    _LocalGateway_SetID_Handler,
		},
		{
			MethodName: "StartKernel",
			Handler:    _LocalGateway_StartKernel_Handler,
		},
		{
			MethodName: "StartKernelReplica",
			Handler:    _LocalGateway_StartKernelReplica_Handler,
		},
		{
			MethodName: "GetKernelStatus",
			Handler:    _LocalGateway_GetKernelStatus_Handler,
		},
		{
			MethodName: "KillKernel",
			Handler:    _LocalGateway_KillKernel_Handler,
		},
		{
			MethodName: "StopKernel",
			Handler:    _LocalGateway_StopKernel_Handler,
		},
		{
			MethodName: "WaitKernel",
			Handler:    _LocalGateway_WaitKernel_Handler,
		},
		{
			MethodName: "SetClose",
			Handler:    _LocalGateway_SetClose_Handler,
		},
		{
			MethodName: "AddReplica",
			Handler:    _LocalGateway_AddReplica_Handler,
		},
		{
			MethodName: "UpdateReplicaAddr",
			Handler:    _LocalGateway_UpdateReplicaAddr_Handler,
		},
		{
			MethodName: "PrepareToMigrate",
			Handler:    _LocalGateway_PrepareToMigrate_Handler,
		},
		{
			MethodName: "GetActualGpuInfo",
			Handler:    _LocalGateway_GetActualGpuInfo_Handler,
		},
		{
			MethodName: "GetVirtualGpuInfo",
			Handler:    _LocalGateway_GetVirtualGpuInfo_Handler,
		},
		{
			MethodName: "SetTotalVirtualGPUs",
			Handler:    _LocalGateway_SetTotalVirtualGPUs_Handler,
		},
		{
			MethodName: "GetVirtualGpuAllocations",
			Handler:    _LocalGateway_GetVirtualGpuAllocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/api/proto/gateway.proto",
}
