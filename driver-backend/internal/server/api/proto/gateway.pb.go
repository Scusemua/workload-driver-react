// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.2
// source: internal/server/api/proto/gateway.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClusterStatisticsResponse encapsulates a serialized ClusterStatistics struct.
type ClusterStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId                   string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	SerializedClusterStatistics []byte `protobuf:"bytes,2,opt,name=serializedClusterStatistics,proto3" json:"serializedClusterStatistics,omitempty"`
}

func (x *ClusterStatisticsResponse) Reset() {
	*x = ClusterStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatisticsResponse) ProtoMessage() {}

func (x *ClusterStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatisticsResponse.ProtoReflect.Descriptor instead.
func (*ClusterStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterStatisticsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ClusterStatisticsResponse) GetSerializedClusterStatistics() []byte {
	if x != nil {
		return x.SerializedClusterStatistics
	}
	return nil
}

// ForceLocalDaemonToReconnectRequest is sent as an argument for the ForceLocalDaemonToReconnect RPC.
type ForceLocalDaemonToReconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LocalDaemonId is the node ID of the local daemon that should be instructed to reconnect to the Cluster Gateway.
	LocalDaemonId string `protobuf:"bytes,1,opt,name=localDaemonId,proto3" json:"localDaemonId,omitempty"`
	// If true, then wait until after returning from the ReconnectToGateway gRPC call to initiate the reconnection
	// procedure (which necessarily terminates the existing connection).
	Delay bool `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *ForceLocalDaemonToReconnectRequest) Reset() {
	*x = ForceLocalDaemonToReconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceLocalDaemonToReconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceLocalDaemonToReconnectRequest) ProtoMessage() {}

func (x *ForceLocalDaemonToReconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceLocalDaemonToReconnectRequest.ProtoReflect.Descriptor instead.
func (*ForceLocalDaemonToReconnectRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *ForceLocalDaemonToReconnectRequest) GetLocalDaemonId() string {
	if x != nil {
		return x.LocalDaemonId
	}
	return ""
}

func (x *ForceLocalDaemonToReconnectRequest) GetDelay() bool {
	if x != nil {
		return x.Delay
	}
	return false
}

// QueryMessageRequest is passed to the MessageExists gRPC function.
//
// It encapsulates a request concerning the existence/status of a particular ZMQ message.
type QueryMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Jupyter message ID.
	MessageId string `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// The Jupyter message type.
	MessageType string `protobuf:"bytes,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	// The target kernel.
	KernelId string `protobuf:"bytes,3,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
}

func (x *QueryMessageRequest) Reset() {
	*x = QueryMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMessageRequest) ProtoMessage() {}

func (x *QueryMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMessageRequest.ProtoReflect.Descriptor instead.
func (*QueryMessageRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *QueryMessageRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *QueryMessageRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *QueryMessageRequest) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

// QueryMessageResponse is returned by the gRPC function.
//
// It encodes the existence/status of the specified or requested ZMQ message.
type QueryMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestTraces []*RequestTrace `protobuf:"bytes,1,rep,name=requestTraces,proto3" json:"requestTraces,omitempty"`
}

func (x *QueryMessageResponse) Reset() {
	*x = QueryMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMessageResponse) ProtoMessage() {}

func (x *QueryMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMessageResponse.ProtoReflect.Descriptor instead.
func (*QueryMessageResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *QueryMessageResponse) GetRequestTraces() []*RequestTrace {
	if x != nil {
		return x.RequestTraces
	}
	return nil
}

// ClusterAgeResponse is returned by the ClusterAge gRPC function.
// It encodes the age of the Cluster as a UnixMilliseconds timestamp.
type ClusterAgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Age is the age of the Cluster in the form of a UnixMilliseconds timestamp.
	Age int64 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *ClusterAgeResponse) Reset() {
	*x = ClusterAgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAgeResponse) ProtoMessage() {}

func (x *ClusterAgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAgeResponse.ProtoReflect.Descriptor instead.
func (*ClusterAgeResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterAgeResponse) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

// GetLocalDaemonNodeIDsResponse is returned by the GetLocalDaemonNodeIDs gRPC function.
// GetLocalDaemonNodeIDsResponse encapsulates a string slice containing the host IDs of each local daemon.
type GetLocalDaemonNodeIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HostIds is a string slice containing the host IDs of each local daemon.
	HostIds []string `protobuf:"bytes,1,rep,name=hostIds,proto3" json:"hostIds,omitempty"`
}

func (x *GetLocalDaemonNodeIDsResponse) Reset() {
	*x = GetLocalDaemonNodeIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalDaemonNodeIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalDaemonNodeIDsResponse) ProtoMessage() {}

func (x *GetLocalDaemonNodeIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalDaemonNodeIDsResponse.ProtoReflect.Descriptor instead.
func (*GetLocalDaemonNodeIDsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *GetLocalDaemonNodeIDsResponse) GetHostIds() []string {
	if x != nil {
		return x.HostIds
	}
	return nil
}

// DashboardRegistrationResponse encapsulates any important configuration information that is desired by the
// backend server of the Cluster Dashboard.
type DashboardRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeploymentMode indicates whether the Cluster is running in Kubernetes mode or Docker mode.
	// Valid options include "local", "docker-compose", "docker-swarm", and "kubernetes".
	DeploymentMode string `protobuf:"bytes,1,opt,name=DeploymentMode,proto3" json:"DeploymentMode,omitempty"`
	// SchedulingMode indicates the scheduling policy that the Cluster Gateway has been configured to use.
	SchedulingPolicy string `protobuf:"bytes,2,opt,name=SchedulingPolicy,proto3" json:"SchedulingPolicy,omitempty"`
	// NumReplicas refers to the number of replicas that each Jupyter kernel is configured to have.
	NumReplicas int32 `protobuf:"varint,3,opt,name=NumReplicas,proto3" json:"NumReplicas,omitempty"`
}

func (x *DashboardRegistrationResponse) Reset() {
	*x = DashboardRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardRegistrationResponse) ProtoMessage() {}

func (x *DashboardRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardRegistrationResponse.ProtoReflect.Descriptor instead.
func (*DashboardRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *DashboardRegistrationResponse) GetDeploymentMode() string {
	if x != nil {
		return x.DeploymentMode
	}
	return ""
}

func (x *DashboardRegistrationResponse) GetSchedulingPolicy() string {
	if x != nil {
		return x.SchedulingPolicy
	}
	return ""
}

func (x *DashboardRegistrationResponse) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

// RemoveSpecificClusterNodesRequest is passed as an argument to the RemoveSpecificClusterNodes gRPC function.
// RemoveSpecificClusterNodesRequest encodes the IDs of the nodes to remove from the cluster.
type RemoveSpecificClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestId is the unique request ID of the RemoveSpecificClusterNodesRequest.
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// NodeIDs are the IDs of the nodes to be removed.
	NodeIDs []string `protobuf:"bytes,2,rep,name=nodeIDs,proto3" json:"nodeIDs,omitempty"`
}

func (x *RemoveSpecificClusterNodesRequest) Reset() {
	*x = RemoveSpecificClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSpecificClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSpecificClusterNodesRequest) ProtoMessage() {}

func (x *RemoveSpecificClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSpecificClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*RemoveSpecificClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveSpecificClusterNodesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RemoveSpecificClusterNodesRequest) GetNodeIDs() []string {
	if x != nil {
		return x.NodeIDs
	}
	return nil
}

// RemoveSpecificClusterNodesResponse is returned by the RemoveSpecificClusterNodes gRPC function.
type RemoveSpecificClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestId is the unique request ID of the RemoveSpecificClusterNodesRequest.
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// OldNumNodes is the number of nodes that were in the cluster prior to the 'decrease' operation.
	OldNumNodes int32 `protobuf:"varint,2,opt,name=oldNumNodes,proto3" json:"oldNumNodes,omitempty"`
	// NumNodesRemoved is the the number of nodes that were removed from the cluster.
	NumNodesRemoved int32 `protobuf:"varint,3,opt,name=numNodesRemoved,proto3" json:"numNodesRemoved,omitempty"`
	// NewNumNodes is the number of nodes that are in the cluster after to the 'decrease' operation.
	NewNumNodes int32 `protobuf:"varint,4,opt,name=newNumNodes,proto3" json:"newNumNodes,omitempty"`
	// NodesRemoved contains the IDs of the nodes that were removed from the cluster.
	NodesRemoved []string `protobuf:"bytes,5,rep,name=nodesRemoved,proto3" json:"nodesRemoved,omitempty"`
}

func (x *RemoveSpecificClusterNodesResponse) Reset() {
	*x = RemoveSpecificClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSpecificClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSpecificClusterNodesResponse) ProtoMessage() {}

func (x *RemoveSpecificClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSpecificClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*RemoveSpecificClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveSpecificClusterNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RemoveSpecificClusterNodesResponse) GetOldNumNodes() int32 {
	if x != nil {
		return x.OldNumNodes
	}
	return 0
}

func (x *RemoveSpecificClusterNodesResponse) GetNumNodesRemoved() int32 {
	if x != nil {
		return x.NumNodesRemoved
	}
	return 0
}

func (x *RemoveSpecificClusterNodesResponse) GetNewNumNodes() int32 {
	if x != nil {
		return x.NewNumNodes
	}
	return 0
}

func (x *RemoveSpecificClusterNodesResponse) GetNodesRemoved() []string {
	if x != nil {
		return x.NodesRemoved
	}
	return nil
}

// RemoveClusterNodesRequest is passed as an argument to the RemoveClusterNodes gRPC function.
// RemoveClusterNodesRequest encodes the number of nodes to remove from the cluster.
type RemoveClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestId is the unique request ID of the RemoveClusterNodesRequest.
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// numNodesToRemove is the the number of nodes that should be removed from the cluster.
	NumNodesToRemove int32 `protobuf:"varint,2,opt,name=numNodesToRemove,proto3" json:"numNodesToRemove,omitempty"`
}

func (x *RemoveClusterNodesRequest) Reset() {
	*x = RemoveClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClusterNodesRequest) ProtoMessage() {}

func (x *RemoveClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*RemoveClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveClusterNodesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RemoveClusterNodesRequest) GetNumNodesToRemove() int32 {
	if x != nil {
		return x.NumNodesToRemove
	}
	return 0
}

// RemoveClusterNodesResponse is returned by the RemoveClusterNodes gRPC function.
// It encodes information about the number of nodes in the cluster before and after the 'decrease' operation.
type RemoveClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestId is the unique request ID that was included in the associated RemoveClusterNodesRequest.
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// OldNumNodes is the number of nodes that were in the cluster prior to the 'decrease' operation.
	OldNumNodes int32 `protobuf:"varint,2,opt,name=oldNumNodes,proto3" json:"oldNumNodes,omitempty"`
	// NumNodesRemoved is the the number of nodes that were removed from the cluster.
	NumNodesRemoved int32 `protobuf:"varint,3,opt,name=numNodesRemoved,proto3" json:"numNodesRemoved,omitempty"`
	// NewNumNodes is the number of nodes that are in the cluster after to the 'decrease' operation.
	NewNumNodes int32 `protobuf:"varint,4,opt,name=newNumNodes,proto3" json:"newNumNodes,omitempty"`
}

func (x *RemoveClusterNodesResponse) Reset() {
	*x = RemoveClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClusterNodesResponse) ProtoMessage() {}

func (x *RemoveClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*RemoveClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveClusterNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RemoveClusterNodesResponse) GetOldNumNodes() int32 {
	if x != nil {
		return x.OldNumNodes
	}
	return 0
}

func (x *RemoveClusterNodesResponse) GetNumNodesRemoved() int32 {
	if x != nil {
		return x.NumNodesRemoved
	}
	return 0
}

func (x *RemoveClusterNodesResponse) GetNewNumNodes() int32 {
	if x != nil {
		return x.NewNumNodes
	}
	return 0
}

// AddClusterNodesRequest structs are passed as arguments to the AddClusterNodes gRPC function.
// An AddClusterNodesRequest struct encodes the number of nodes to be created as well as any necessary
// configuration that will be used to create/provision the new nodes.
type AddClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestId is a unique identifier for this particular AddClusterNodes operation.
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// NumNodes specifies the number of virtual nodes to add to the cluster.
	NumNodes int32 `protobuf:"varint,2,opt,name=numNodes,proto3" json:"numNodes,omitempty"`
}

func (x *AddClusterNodesRequest) Reset() {
	*x = AddClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterNodesRequest) ProtoMessage() {}

func (x *AddClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*AddClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *AddClusterNodesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AddClusterNodesRequest) GetNumNodes() int32 {
	if x != nil {
		return x.NumNodes
	}
	return 0
}

// AddClusterNodesResponse structs are returned by the AddClusterNodes gRPC function.
// AddClusterNodesResponse structs describe whether the 'add node(s)' operation was successful.
type AddClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestId is the unique identifier that was included in the corresponding AddVirtualDockerNodesRequest struct.
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// NumNodesCreated describes the number of virtual nodes that were successfully added to the cluster.
	NumNodesCreated int32 `protobuf:"varint,2,opt,name=numNodesCreated,proto3" json:"numNodesCreated,omitempty"`
	// NumNodesRequested encodes the number of virtual node that were originally requested to be provisioned.
	NumNodesRequested int32 `protobuf:"varint,3,opt,name=numNodesRequested,proto3" json:"numNodesRequested,omitempty"`
	// PrevNumNodes is how many nodes there were prior to adding new nodes.
	PrevNumNodes int32 `protobuf:"varint,4,opt,name=prevNumNodes,proto3" json:"prevNumNodes,omitempty"`
}

func (x *AddClusterNodesResponse) Reset() {
	*x = AddClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterNodesResponse) ProtoMessage() {}

func (x *AddClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*AddClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *AddClusterNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AddClusterNodesResponse) GetNumNodesCreated() int32 {
	if x != nil {
		return x.NumNodesCreated
	}
	return 0
}

func (x *AddClusterNodesResponse) GetNumNodesRequested() int32 {
	if x != nil {
		return x.NumNodesRequested
	}
	return 0
}

func (x *AddClusterNodesResponse) GetPrevNumNodes() int32 {
	if x != nil {
		return x.PrevNumNodes
	}
	return 0
}

// ModifyClusterNodesRequest structs are passed as arguments to the ModifyClusterNodes gRPC function.
// An ModifyClusterNodesRequest struct encodes the properties to be modified for each of the target nodes.
type ModifyClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	TargetNumNodes int32  `protobuf:"varint,2,opt,name=targetNumNodes,proto3" json:"targetNumNodes,omitempty"`
}

func (x *ModifyClusterNodesRequest) Reset() {
	*x = ModifyClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyClusterNodesRequest) ProtoMessage() {}

func (x *ModifyClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*ModifyClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyClusterNodesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ModifyClusterNodesRequest) GetTargetNumNodes() int32 {
	if x != nil {
		return x.TargetNumNodes
	}
	return 0
}

// ModifyClusterNodesResponse structs are returned by the ModifyClusterNodes gRPC function.
// ModifyClusterNodesResponse structs describe whether the 'modify/update node(s)' operation was successful.
type ModifyClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *ModifyClusterNodesResponse) Reset() {
	*x = ModifyClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyClusterNodesResponse) ProtoMessage() {}

func (x *ModifyClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*ModifyClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyClusterNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// SetNumClusterNodesRequest is passed as an argument to the SetNumClusterNodes gRPC function.
// SetNumClusterNodesRequest encodes the target number of nodes.
type SetNumClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// TargetNumNodes is the target number of nodes to scale to.
	TargetNumNodes int32 `protobuf:"varint,2,opt,name=targetNumNodes,proto3" json:"targetNumNodes,omitempty"`
}

func (x *SetNumClusterNodesRequest) Reset() {
	*x = SetNumClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNumClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNumClusterNodesRequest) ProtoMessage() {}

func (x *SetNumClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNumClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*SetNumClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *SetNumClusterNodesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SetNumClusterNodesRequest) GetTargetNumNodes() int32 {
	if x != nil {
		return x.TargetNumNodes
	}
	return 0
}

// SetNumClusterNodesResponse is returned by the SetNumClusterNodes gRPC function.
// It encodes information about the number of nodes in the cluster before and after the 'set' operation.
type SetNumClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// OldNumNodes is the number of nodes that were in the cluster prior to the 'set' operation.
	OldNumNodes int32 `protobuf:"varint,2,opt,name=oldNumNodes,proto3" json:"oldNumNodes,omitempty"`
	// NewNumNodes is the number of nodes that are in the cluster after to the 'set' operation.
	NewNumNodes int32 `protobuf:"varint,3,opt,name=newNumNodes,proto3" json:"newNumNodes,omitempty"`
}

func (x *SetNumClusterNodesResponse) Reset() {
	*x = SetNumClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNumClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNumClusterNodesResponse) ProtoMessage() {}

func (x *SetNumClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNumClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*SetNumClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *SetNumClusterNodesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SetNumClusterNodesResponse) GetOldNumNodes() int32 {
	if x != nil {
		return x.OldNumNodes
	}
	return 0
}

func (x *SetNumClusterNodesResponse) GetNewNumNodes() int32 {
	if x != nil {
		return x.NewNumNodes
	}
	return 0
}

// GetVirtualDockerNodesResponse is returned by the GetVirtualDockerNodes gRPC function.
// A GetVirtualDockerNodesResponse struct describes all of the virtual nodes within the cluster.
type GetVirtualDockerNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nodes is a slice of VirtualDockerNode structs, where each VirtualDockerNode
	// describes one of the virtual nodes within the cluster.
	Nodes []*VirtualDockerNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetVirtualDockerNodesResponse) Reset() {
	*x = GetVirtualDockerNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualDockerNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualDockerNodesResponse) ProtoMessage() {}

func (x *GetVirtualDockerNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualDockerNodesResponse.ProtoReflect.Descriptor instead.
func (*GetVirtualDockerNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *GetVirtualDockerNodesResponse) GetNodes() []*VirtualDockerNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// RemoteStorageDefinition defines a simulated remote storage to use for checkpointing by the kernel replicas.
type RemoteStorageDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DownloadRate                   int64   `protobuf:"varint,2,opt,name=downloadRate,proto3" json:"downloadRate,omitempty"`
	UploadRate                     int64   `protobuf:"varint,3,opt,name=uploadRate,proto3" json:"uploadRate,omitempty"`
	DownloadRateVariancePercentage float32 `protobuf:"fixed32,4,opt,name=downloadRateVariancePercentage,proto3" json:"downloadRateVariancePercentage,omitempty"`
	UploadRateVariancePercentage   float32 `protobuf:"fixed32,5,opt,name=uploadRateVariancePercentage,proto3" json:"uploadRateVariancePercentage,omitempty"`
	ReadFailureChancePercentage    float32 `protobuf:"fixed32,6,opt,name=readFailureChancePercentage,proto3" json:"readFailureChancePercentage,omitempty"`
	WriteFailureChancePercentage   float32 `protobuf:"fixed32,7,opt,name=writeFailureChancePercentage,proto3" json:"writeFailureChancePercentage,omitempty"`
}

func (x *RemoteStorageDefinition) Reset() {
	*x = RemoteStorageDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageDefinition) ProtoMessage() {}

func (x *RemoteStorageDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageDefinition.ProtoReflect.Descriptor instead.
func (*RemoteStorageDefinition) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *RemoteStorageDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteStorageDefinition) GetDownloadRate() int64 {
	if x != nil {
		return x.DownloadRate
	}
	return 0
}

func (x *RemoteStorageDefinition) GetUploadRate() int64 {
	if x != nil {
		return x.UploadRate
	}
	return 0
}

func (x *RemoteStorageDefinition) GetDownloadRateVariancePercentage() float32 {
	if x != nil {
		return x.DownloadRateVariancePercentage
	}
	return 0
}

func (x *RemoteStorageDefinition) GetUploadRateVariancePercentage() float32 {
	if x != nil {
		return x.UploadRateVariancePercentage
	}
	return 0
}

func (x *RemoteStorageDefinition) GetReadFailureChancePercentage() float32 {
	if x != nil {
		return x.ReadFailureChancePercentage
	}
	return 0
}

func (x *RemoteStorageDefinition) GetWriteFailureChancePercentage() float32 {
	if x != nil {
		return x.WriteFailureChancePercentage
	}
	return 0
}

// VirtualDockerNode represents/describes a "virtual" node within the Docker Swarm cluster.
// Docker Swarm clusters have a concept of nodes -- they can span multiple machines or VMs.
// Each Docker Swarm node hosts containers. Virtual nodes correspond to Local Daemons.
// Each Local Daemon manages its own virtual node. If there are multiple local daemon containers
// running on a single Docker Swarm node, then each local daemon manages its own virtual node, so
// there will be multiple virtual nodes on the single Docker Swarm mode.
type VirtualDockerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeId is the unique identifier of the node.
	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// Containers is a slice of DockerContainer structs representing the containers running on this VirtualDockerNode.
	Containers []*DockerContainer `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
	// SpecCpu is the total number of CPUs on the VirtualDockerNode.
	// This quantity is not impacted by active allocations.
	SpecCpu float32 `protobuf:"fixed32,3,opt,name=specCpu,proto3" json:"specCpu,omitempty"`
	// SpecMemory is the total amount of RAM on the VirtualDockerNode in megabytes (MB).
	// This quantity is not impacted by active allocations.
	SpecMemory float32 `protobuf:"fixed32,4,opt,name=specMemory,proto3" json:"specMemory,omitempty"`
	// SpecGpu is the total number of vGPUs on the VirtualDockerNode.
	// This quantity is not impacted by active allocations.
	SpecGpu float32 `protobuf:"fixed32,5,opt,name=specGpu,proto3" json:"specGpu,omitempty"`
	// SpecVRAM is the amount of VRAM (in GB) available on the VirtualDockerNode.
	// This quantity is not impacted by active allocations.
	SpecVRAM float32 `protobuf:"fixed32,6,opt,name=specVRAM,proto3" json:"specVRAM,omitempty"`
	// AllocatedCpu is the number of vCPUs that is actively/currently allocated on the VirtualDockerNode.
	AllocatedCpu float32 `protobuf:"fixed32,7,opt,name=allocatedCpu,proto3" json:"allocatedCpu,omitempty"`
	// AllocatedMemory is the amount of memory (in megabytes) that is currently allocated on the VirtualDockerNode.
	AllocatedMemory float32 `protobuf:"fixed32,8,opt,name=allocatedMemory,proto3" json:"allocatedMemory,omitempty"`
	// AllocatedGpu is the number of vGPUs that is actively/currently allocated on the VirtualDockerNode.
	AllocatedGpu float32 `protobuf:"fixed32,9,opt,name=allocatedGpu,proto3" json:"allocatedGpu,omitempty"`
	// AllocatedGpu is the amount of VRAM that is actively/currently allocated on the VirtualDockerNode.
	AllocatedVRAM float32 `protobuf:"fixed32,10,opt,name=allocatedVRAM,proto3" json:"allocatedVRAM,omitempty"`
	// PendingCpu is the number of vCPUs that is subscribed (but not committed) on the VirtualDockerNode.
	PendingCpu float32 `protobuf:"fixed32,11,opt,name=pendingCpu,proto3" json:"pendingCpu,omitempty"`
	// PendingMemory is the amount of memory (in megabytes) that is subscribed (but not committed) on the VirtualDockerNode.
	PendingMemory float32 `protobuf:"fixed32,12,opt,name=pendingMemory,proto3" json:"pendingMemory,omitempty"`
	// PendingGpus is the number of vGPUs that is subscribed (but not committed) on the VirtualDockerNode.
	PendingGpu float32 `protobuf:"fixed32,13,opt,name=pendingGpu,proto3" json:"pendingGpu,omitempty"`
	// PendingVRAM is the amount of VRAM (in GB) that is subscribed (but not committed) on the VirtualDockerNode.
	PendingVRAM float32 `protobuf:"fixed32,14,opt,name=pendingVRAM,proto3" json:"pendingVRAM,omitempty"`
	// NodeName is the name of the node.
	NodeName string `protobuf:"bytes,15,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	// Address is the IP address of the node.
	Address string `protobuf:"bytes,16,opt,name=address,proto3" json:"address,omitempty"`
	// CreatedAt is the time that the node was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Enabled indicates whether the Host is enabled or disabled.
	Enabled bool `protobuf:"varint,18,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *VirtualDockerNode) Reset() {
	*x = VirtualDockerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDockerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDockerNode) ProtoMessage() {}

func (x *VirtualDockerNode) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDockerNode.ProtoReflect.Descriptor instead.
func (*VirtualDockerNode) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{19}
}

func (x *VirtualDockerNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *VirtualDockerNode) GetContainers() []*DockerContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *VirtualDockerNode) GetSpecCpu() float32 {
	if x != nil {
		return x.SpecCpu
	}
	return 0
}

func (x *VirtualDockerNode) GetSpecMemory() float32 {
	if x != nil {
		return x.SpecMemory
	}
	return 0
}

func (x *VirtualDockerNode) GetSpecGpu() float32 {
	if x != nil {
		return x.SpecGpu
	}
	return 0
}

func (x *VirtualDockerNode) GetSpecVRAM() float32 {
	if x != nil {
		return x.SpecVRAM
	}
	return 0
}

func (x *VirtualDockerNode) GetAllocatedCpu() float32 {
	if x != nil {
		return x.AllocatedCpu
	}
	return 0
}

func (x *VirtualDockerNode) GetAllocatedMemory() float32 {
	if x != nil {
		return x.AllocatedMemory
	}
	return 0
}

func (x *VirtualDockerNode) GetAllocatedGpu() float32 {
	if x != nil {
		return x.AllocatedGpu
	}
	return 0
}

func (x *VirtualDockerNode) GetAllocatedVRAM() float32 {
	if x != nil {
		return x.AllocatedVRAM
	}
	return 0
}

func (x *VirtualDockerNode) GetPendingCpu() float32 {
	if x != nil {
		return x.PendingCpu
	}
	return 0
}

func (x *VirtualDockerNode) GetPendingMemory() float32 {
	if x != nil {
		return x.PendingMemory
	}
	return 0
}

func (x *VirtualDockerNode) GetPendingGpu() float32 {
	if x != nil {
		return x.PendingGpu
	}
	return 0
}

func (x *VirtualDockerNode) GetPendingVRAM() float32 {
	if x != nil {
		return x.PendingVRAM
	}
	return 0
}

func (x *VirtualDockerNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *VirtualDockerNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VirtualDockerNode) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VirtualDockerNode) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// DockerContainer describes a Docker container.
type DockerContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName string `protobuf:"bytes,1,opt,name=containerName,proto3" json:"containerName,omitempty"`
	// ContainerStatus describes the [lifecycle state or status] of the Docker container.
	//
	// [lifecycle state or status]: https://docs.docker.com/reference/cli/docker/container/ls/#status
	ContainerStatus string `protobuf:"bytes,2,opt,name=containerStatus,proto3" json:"containerStatus,omitempty"`
	ContainerAge    string `protobuf:"bytes,3,opt,name=containerAge,proto3" json:"containerAge,omitempty"`
	ContainerIp     string `protobuf:"bytes,4,opt,name=containerIp,proto3" json:"containerIp,omitempty"`
	Valid           bool   `protobuf:"varint,5,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *DockerContainer) Reset() {
	*x = DockerContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContainer) ProtoMessage() {}

func (x *DockerContainer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContainer.ProtoReflect.Descriptor instead.
func (*DockerContainer) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{20}
}

func (x *DockerContainer) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DockerContainer) GetContainerStatus() string {
	if x != nil {
		return x.ContainerStatus
	}
	return ""
}

func (x *DockerContainer) GetContainerAge() string {
	if x != nil {
		return x.ContainerAge
	}
	return ""
}

func (x *DockerContainer) GetContainerIp() string {
	if x != nil {
		return x.ContainerIp
	}
	return ""
}

func (x *DockerContainer) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

// GetDockerSwarmNodesResponse is returned by the GetDockerSwarmNodes gRPC function.
// A GetDockerSwarmNodesResponse struct describes all of the "actual" nodes within the Docker Swarm cluster.
type GetDockerSwarmNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nodes is a slice of DockerSwarmNode structs, where each DockerSwarmNode
	// describes one of the "actual" nodes within the Docker Swarm cluster.
	Nodes []*DockerSwarmNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetDockerSwarmNodesResponse) Reset() {
	*x = GetDockerSwarmNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDockerSwarmNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDockerSwarmNodesResponse) ProtoMessage() {}

func (x *GetDockerSwarmNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDockerSwarmNodesResponse.ProtoReflect.Descriptor instead.
func (*GetDockerSwarmNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{21}
}

func (x *GetDockerSwarmNodesResponse) GetNodes() []*DockerSwarmNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// DockerSwarmNode represents/describes an "actual" node within the Docker Swarm cluster.
type DockerSwarmNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string   `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Containers []string `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *DockerSwarmNode) Reset() {
	*x = DockerSwarmNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerSwarmNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerSwarmNode) ProtoMessage() {}

func (x *DockerSwarmNode) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerSwarmNode.ProtoReflect.Descriptor instead.
func (*DockerSwarmNode) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{22}
}

func (x *DockerSwarmNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DockerSwarmNode) GetContainers() []string {
	if x != nil {
		return x.Containers
	}
	return nil
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success       bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string          `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"` // For adding extra details if the ping fails.
	RequestTraces []*RequestTrace `protobuf:"bytes,4,rep,name=requestTraces,proto3" json:"requestTraces,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{23}
}

func (x *Pong) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pong) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Pong) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Pong) GetRequestTraces() []*RequestTrace {
	if x != nil {
		return x.RequestTraces
	}
	return nil
}

type RequestTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId                      string `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	MessageType                    string `protobuf:"bytes,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	KernelId                       string `protobuf:"bytes,3,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	ReplicaId                      int32  `protobuf:"varint,4,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	RequestReceivedByGateway       int64  `protobuf:"varint,5,opt,name=requestReceivedByGateway,proto3" json:"requestReceivedByGateway,omitempty"`
	RequestSentByGateway           int64  `protobuf:"varint,6,opt,name=requestSentByGateway,proto3" json:"requestSentByGateway,omitempty"`
	RequestReceivedByLocalDaemon   int64  `protobuf:"varint,7,opt,name=requestReceivedByLocalDaemon,proto3" json:"requestReceivedByLocalDaemon,omitempty"`
	RequestSentByLocalDaemon       int64  `protobuf:"varint,8,opt,name=requestSentByLocalDaemon,proto3" json:"requestSentByLocalDaemon,omitempty"`
	RequestReceivedByKernelReplica int64  `protobuf:"varint,9,opt,name=requestReceivedByKernelReplica,proto3" json:"requestReceivedByKernelReplica,omitempty"`
	ReplySentByKernelReplica       int64  `protobuf:"varint,10,opt,name=replySentByKernelReplica,proto3" json:"replySentByKernelReplica,omitempty"`
	ReplyReceivedByLocalDaemon     int64  `protobuf:"varint,11,opt,name=replyReceivedByLocalDaemon,proto3" json:"replyReceivedByLocalDaemon,omitempty"`
	ReplySentByLocalDaemon         int64  `protobuf:"varint,12,opt,name=replySentByLocalDaemon,proto3" json:"replySentByLocalDaemon,omitempty"`
	ReplyReceivedByGateway         int64  `protobuf:"varint,13,opt,name=replyReceivedByGateway,proto3" json:"replyReceivedByGateway,omitempty"`
	ReplySentByGateway             int64  `protobuf:"varint,14,opt,name=replySentByGateway,proto3" json:"replySentByGateway,omitempty"`
	RequestTraceUuid               string `protobuf:"bytes,15,opt,name=requestTraceUuid,proto3" json:"requestTraceUuid,omitempty"`
}

func (x *RequestTrace) Reset() {
	*x = RequestTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTrace) ProtoMessage() {}

func (x *RequestTrace) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTrace.ProtoReflect.Descriptor instead.
func (*RequestTrace) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{24}
}

func (x *RequestTrace) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *RequestTrace) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *RequestTrace) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *RequestTrace) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *RequestTrace) GetRequestReceivedByGateway() int64 {
	if x != nil {
		return x.RequestReceivedByGateway
	}
	return 0
}

func (x *RequestTrace) GetRequestSentByGateway() int64 {
	if x != nil {
		return x.RequestSentByGateway
	}
	return 0
}

func (x *RequestTrace) GetRequestReceivedByLocalDaemon() int64 {
	if x != nil {
		return x.RequestReceivedByLocalDaemon
	}
	return 0
}

func (x *RequestTrace) GetRequestSentByLocalDaemon() int64 {
	if x != nil {
		return x.RequestSentByLocalDaemon
	}
	return 0
}

func (x *RequestTrace) GetRequestReceivedByKernelReplica() int64 {
	if x != nil {
		return x.RequestReceivedByKernelReplica
	}
	return 0
}

func (x *RequestTrace) GetReplySentByKernelReplica() int64 {
	if x != nil {
		return x.ReplySentByKernelReplica
	}
	return 0
}

func (x *RequestTrace) GetReplyReceivedByLocalDaemon() int64 {
	if x != nil {
		return x.ReplyReceivedByLocalDaemon
	}
	return 0
}

func (x *RequestTrace) GetReplySentByLocalDaemon() int64 {
	if x != nil {
		return x.ReplySentByLocalDaemon
	}
	return 0
}

func (x *RequestTrace) GetReplyReceivedByGateway() int64 {
	if x != nil {
		return x.ReplyReceivedByGateway
	}
	return 0
}

func (x *RequestTrace) GetReplySentByGateway() int64 {
	if x != nil {
		return x.ReplySentByGateway
	}
	return 0
}

func (x *RequestTrace) GetRequestTraceUuid() string {
	if x != nil {
		return x.RequestTraceUuid
	}
	return ""
}

type PingInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId   string `protobuf:"bytes,1,opt,name=kernelId,proto3" json:"kernelId,omitempty"`     // The kernel to target
	SocketType string `protobuf:"bytes,2,opt,name=socketType,proto3" json:"socketType,omitempty"` // The type of socket to use to issue the "ping" ("control" or "shell")
}

func (x *PingInstruction) Reset() {
	*x = PingInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingInstruction) ProtoMessage() {}

func (x *PingInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingInstruction.ProtoReflect.Descriptor instead.
func (*PingInstruction) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{25}
}

func (x *PingInstruction) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *PingInstruction) GetSocketType() string {
	if x != nil {
		return x.SocketType
	}
	return ""
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title            string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Message          string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	NotificationType int32  `protobuf:"varint,4,opt,name=notificationType,proto3" json:"notificationType,omitempty"`
	Panicked         bool   `protobuf:"varint,5,opt,name=panicked,proto3" json:"panicked,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{26}
}

func (x *Notification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Notification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Notification) GetNotificationType() int32 {
	if x != nil {
		return x.NotificationType
	}
	return 0
}

func (x *Notification) GetPanicked() bool {
	if x != nil {
		return x.Panicked
	}
	return false
}

// Used to register the ResourceSpec to be used by a particular kernel.
// If I find a nice way to pass this directly through the usual Jupyter launch-kernel path, then I'll use that instead.
type ResourceSpecRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId     string        `protobuf:"bytes,1,opt,name=kernelId,proto3" json:"kernelId,omitempty"`         // The ID of the kernel.
	ResourceSpec *ResourceSpec `protobuf:"bytes,2,opt,name=resourceSpec,proto3" json:"resourceSpec,omitempty"` // The kernel's resource spec, which should define the resource limits/maximum resources required during the kernel's lifetime.
}

func (x *ResourceSpecRegistration) Reset() {
	*x = ResourceSpecRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSpecRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpecRegistration) ProtoMessage() {}

func (x *ResourceSpecRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpecRegistration.ProtoReflect.Descriptor instead.
func (*ResourceSpecRegistration) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{27}
}

func (x *ResourceSpecRegistration) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *ResourceSpecRegistration) GetResourceSpec() *ResourceSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

// Mapping from Kubernetes node name to the actual GPU info for that node.
type ClusterActualGpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuInfo map[string]*GpuInfo `protobuf:"bytes,1,rep,name=gpuInfo,proto3" json:"gpuInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterActualGpuInfo) Reset() {
	*x = ClusterActualGpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterActualGpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterActualGpuInfo) ProtoMessage() {}

func (x *ClusterActualGpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterActualGpuInfo.ProtoReflect.Descriptor instead.
func (*ClusterActualGpuInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{28}
}

func (x *ClusterActualGpuInfo) GetGpuInfo() map[string]*GpuInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

// Mapping from Kubernetes node name to the virtual GPU info for that node.
type ClusterVirtualGpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuInfo map[string]*VirtualGpuInfo `protobuf:"bytes,1,rep,name=gpuInfo,proto3" json:"gpuInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterVirtualGpuInfo) Reset() {
	*x = ClusterVirtualGpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVirtualGpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVirtualGpuInfo) ProtoMessage() {}

func (x *ClusterVirtualGpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVirtualGpuInfo.ProtoReflect.Descriptor instead.
func (*ClusterVirtualGpuInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{29}
}

func (x *ClusterVirtualGpuInfo) GetGpuInfo() map[string]*VirtualGpuInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

type JupyterKernelReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId  string `protobuf:"bytes,1,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	ReplicaId int32  `protobuf:"varint,2,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	PodId     string `protobuf:"bytes,3,opt,name=podId,proto3" json:"podId,omitempty"`
	NodeId    string `protobuf:"bytes,4,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *JupyterKernelReplica) Reset() {
	*x = JupyterKernelReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JupyterKernelReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JupyterKernelReplica) ProtoMessage() {}

func (x *JupyterKernelReplica) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JupyterKernelReplica.ProtoReflect.Descriptor instead.
func (*JupyterKernelReplica) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{30}
}

func (x *JupyterKernelReplica) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *JupyterKernelReplica) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *JupyterKernelReplica) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *JupyterKernelReplica) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DistributedJupyterKernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId            string                  `protobuf:"bytes,1,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	NumReplicas         int32                   `protobuf:"varint,2,opt,name=numReplicas,proto3" json:"numReplicas,omitempty"`
	Status              string                  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	AggregateBusyStatus string                  `protobuf:"bytes,4,opt,name=aggregateBusyStatus,proto3" json:"aggregateBusyStatus,omitempty"`
	KernelSpec          *KernelSpec             `protobuf:"bytes,5,opt,name=kernelSpec,proto3" json:"kernelSpec,omitempty"`
	Replicas            []*JupyterKernelReplica `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *DistributedJupyterKernel) Reset() {
	*x = DistributedJupyterKernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributedJupyterKernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributedJupyterKernel) ProtoMessage() {}

func (x *DistributedJupyterKernel) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributedJupyterKernel.ProtoReflect.Descriptor instead.
func (*DistributedJupyterKernel) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{31}
}

func (x *DistributedJupyterKernel) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *DistributedJupyterKernel) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *DistributedJupyterKernel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DistributedJupyterKernel) GetAggregateBusyStatus() string {
	if x != nil {
		return x.AggregateBusyStatus
	}
	return ""
}

func (x *DistributedJupyterKernel) GetKernelSpec() *KernelSpec {
	if x != nil {
		return x.KernelSpec
	}
	return nil
}

func (x *DistributedJupyterKernel) GetReplicas() []*JupyterKernelReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type ListKernelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumKernels int32                       `protobuf:"varint,1,opt,name=numKernels,proto3" json:"numKernels,omitempty"`
	Kernels    []*DistributedJupyterKernel `protobuf:"bytes,2,rep,name=kernels,proto3" json:"kernels,omitempty"`
}

func (x *ListKernelsResponse) Reset() {
	*x = ListKernelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKernelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKernelsResponse) ProtoMessage() {}

func (x *ListKernelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKernelsResponse.ProtoReflect.Descriptor instead.
func (*ListKernelsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{32}
}

func (x *ListKernelsResponse) GetNumKernels() int32 {
	if x != nil {
		return x.NumKernels
	}
	return 0
}

func (x *ListKernelsResponse) GetKernels() []*DistributedJupyterKernel {
	if x != nil {
		return x.Kernels
	}
	return nil
}

type ProvisionerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProvisionerId) Reset() {
	*x = ProvisionerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionerId) ProtoMessage() {}

func (x *ProvisionerId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionerId.ProtoReflect.Descriptor instead.
func (*ProvisionerId) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{33}
}

func (x *ProvisionerId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HostSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HostSpec) Reset() {
	*x = HostSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSpec) ProtoMessage() {}

func (x *HostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSpec.ProtoReflect.Descriptor instead.
func (*HostSpec) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{34}
}

func (x *HostSpec) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostSpec) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HostId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeName string `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`  // The name of the Kubernetes node that the Host is running on.
	Existing bool   `protobuf:"varint,3,opt,name=existing,proto3" json:"existing,omitempty"` // Indicates whether the node is starting for the first time or not.
}

func (x *HostId) Reset() {
	*x = HostId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostId) ProtoMessage() {}

func (x *HostId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostId.ProtoReflect.Descriptor instead.
func (*HostId) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{35}
}

func (x *HostId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostId) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *HostId) GetExisting() bool {
	if x != nil {
		return x.Existing
	}
	return false
}

// KernelNotification is very similar to Notification, but it also includes fields to specify the replica ID and
// kernel ID of the kernel sending the notification.
type KernelNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Message          string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NotificationType int32  `protobuf:"varint,3,opt,name=notificationType,proto3" json:"notificationType,omitempty"`
	KernelId         string `protobuf:"bytes,4,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	ReplicaId        int32  `protobuf:"varint,5,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
}

func (x *KernelNotification) Reset() {
	*x = KernelNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelNotification) ProtoMessage() {}

func (x *KernelNotification) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelNotification.ProtoReflect.Descriptor instead.
func (*KernelNotification) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{36}
}

func (x *KernelNotification) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KernelNotification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KernelNotification) GetNotificationType() int32 {
	if x != nil {
		return x.NotificationType
	}
	return 0
}

func (x *KernelNotification) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *KernelNotification) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

// ReconnectToGatewayRequest is sent as an argument to the ReconnectToGateway gRPC call.
type ReconnectToGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then wait until after returning from the ReconnectToGateway gRPC call to initiate the reconnection
	// procedure (which necessarily terminates the existing connection).
	Delay bool `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *ReconnectToGatewayRequest) Reset() {
	*x = ReconnectToGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconnectToGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectToGatewayRequest) ProtoMessage() {}

func (x *ReconnectToGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectToGatewayRequest.ProtoReflect.Descriptor instead.
func (*ReconnectToGatewayRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{37}
}

func (x *ReconnectToGatewayRequest) GetDelay() bool {
	if x != nil {
		return x.Delay
	}
	return false
}

// NodeResourcesSnapshotWithContainers encapsulates a NodeResourcesSnapshot struct as well as information about the
// Containers that are actively scheduled/running on the Host.
type NodeResourcesSnapshotWithContainers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is a unique identifier for the NodeResourcesSnapshotWithContainers struct/message.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ResourceSnapshot is the NodeResourcesSnapshot.
	ResourceSnapshot *NodeResourcesSnapshot `protobuf:"bytes,2,opt,name=resourceSnapshot,proto3" json:"resourceSnapshot,omitempty"`
	// Containers encodes the containers that are presently scheduled on the Host.
	Containers []*ReplicaInfo `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *NodeResourcesSnapshotWithContainers) Reset() {
	*x = NodeResourcesSnapshotWithContainers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResourcesSnapshotWithContainers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResourcesSnapshotWithContainers) ProtoMessage() {}

func (x *NodeResourcesSnapshotWithContainers) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResourcesSnapshotWithContainers.ProtoReflect.Descriptor instead.
func (*NodeResourcesSnapshotWithContainers) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{38}
}

func (x *NodeResourcesSnapshotWithContainers) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeResourcesSnapshotWithContainers) GetResourceSnapshot() *NodeResourcesSnapshot {
	if x != nil {
		return x.ResourceSnapshot
	}
	return nil
}

func (x *NodeResourcesSnapshotWithContainers) GetContainers() []*ReplicaInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

// NodeResourcesSnapshot encodes a snapshot of the current resource quantities on a particular node.
type NodeResourcesSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SnapshotId uniquely identifies the NodeResourcesSnapshot and defines a total order amongst all NodeResourcesSnapshot
	// structs originating from the same node. Each newly-created NodeResourcesSnapshot is assigned an ID from a
	// monotonically-increasing counter by the ResourceManager.
	SnapshotId int32 `protobuf:"varint,1,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
	// NodeId is the ID of the node from which the snapshot originates.
	NodeId string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// ManagerId is the unique ID of the ResourceManager struct from which the NodeResourcesSnapshot was constructed.
	ManagerId string `protobuf:"bytes,3,opt,name=managerId,proto3" json:"managerId,omitempty"`
	// Timestamp is the time at which the NodeResourcesSnapshot was taken/created.
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IdleResources      *ResourcesSnapshot     `protobuf:"bytes,5,opt,name=idleResources,proto3" json:"idleResources,omitempty"`
	PendingResources   *ResourcesSnapshot     `protobuf:"bytes,6,opt,name=pendingResources,proto3" json:"pendingResources,omitempty"`
	CommittedResources *ResourcesSnapshot     `protobuf:"bytes,7,opt,name=committedResources,proto3" json:"committedResources,omitempty"`
	SpecResources      *ResourcesSnapshot     `protobuf:"bytes,8,opt,name=specResources,proto3" json:"specResources,omitempty"`
}

func (x *NodeResourcesSnapshot) Reset() {
	*x = NodeResourcesSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResourcesSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResourcesSnapshot) ProtoMessage() {}

func (x *NodeResourcesSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResourcesSnapshot.ProtoReflect.Descriptor instead.
func (*NodeResourcesSnapshot) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{39}
}

func (x *NodeResourcesSnapshot) GetSnapshotId() int32 {
	if x != nil {
		return x.SnapshotId
	}
	return 0
}

func (x *NodeResourcesSnapshot) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeResourcesSnapshot) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *NodeResourcesSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NodeResourcesSnapshot) GetIdleResources() *ResourcesSnapshot {
	if x != nil {
		return x.IdleResources
	}
	return nil
}

func (x *NodeResourcesSnapshot) GetPendingResources() *ResourcesSnapshot {
	if x != nil {
		return x.PendingResources
	}
	return nil
}

func (x *NodeResourcesSnapshot) GetCommittedResources() *ResourcesSnapshot {
	if x != nil {
		return x.CommittedResources
	}
	return nil
}

func (x *NodeResourcesSnapshot) GetSpecResources() *ResourcesSnapshot {
	if x != nil {
		return x.SpecResources
	}
	return nil
}

// ResourcesSnapshot encodes resource quantities for a particular "status" of resource (ie., idle,
// pending, committed, or spec).
type ResourcesSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceStatus indicates whether this snapshot encodes idle, pending, committed, or spec resources.
	ResourceStatus string `protobuf:"bytes,1,opt,name=resourceStatus,proto3" json:"resourceStatus,omitempty"`
	// Millicpus is CPU in 1/1000th of CPU core.
	Millicpus int32 `protobuf:"varint,2,opt,name=millicpus,proto3" json:"millicpus,omitempty"`
	// MemoryMB is the amount of memory in MB.
	MemoryMb float32 `protobuf:"fixed32,3,opt,name=memoryMb,proto3" json:"memoryMb,omitempty"`
	// Gpus is the number of GPUs.
	Gpus int32 `protobuf:"varint,4,opt,name=gpus,proto3" json:"gpus,omitempty"`
	// VramGb is the amount of VRAM in GB.
	VramGb float32 `protobuf:"fixed32,5,opt,name=vramGb,proto3" json:"vramGb,omitempty"`
	// SnapshotId uniquely identifies the NodeResourcesSnapshot in which this ResourcesSnapshot will be contained.
	// The SnapshotId defines a total order amongst all NodeResourcesSnapshot structs originating from the same node.
	// Each newly-created NodeResourcesSnapshot is assigned an ID from a monotonically-increasing counter by the
	// ResourceManager running on the associated node.
	SnapshotId int32 `protobuf:"varint,6,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
}

func (x *ResourcesSnapshot) Reset() {
	*x = ResourcesSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesSnapshot) ProtoMessage() {}

func (x *ResourcesSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesSnapshot.ProtoReflect.Descriptor instead.
func (*ResourcesSnapshot) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{40}
}

func (x *ResourcesSnapshot) GetResourceStatus() string {
	if x != nil {
		return x.ResourceStatus
	}
	return ""
}

func (x *ResourcesSnapshot) GetMillicpus() int32 {
	if x != nil {
		return x.Millicpus
	}
	return 0
}

func (x *ResourcesSnapshot) GetMemoryMb() float32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *ResourcesSnapshot) GetGpus() int32 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

func (x *ResourcesSnapshot) GetVramGb() float32 {
	if x != nil {
		return x.VramGb
	}
	return 0
}

func (x *ResourcesSnapshot) GetSnapshotId() int32 {
	if x != nil {
		return x.SnapshotId
	}
	return 0
}

// @Deprecated: this should eventually be merged with the updated/unified ModifyClusterNodes API.
type VirtualGpuAllocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocations map[string]*VirtualGpuAllocation `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VirtualGpuAllocations) Reset() {
	*x = VirtualGpuAllocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGpuAllocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGpuAllocations) ProtoMessage() {}

func (x *VirtualGpuAllocations) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGpuAllocations.ProtoReflect.Descriptor instead.
func (*VirtualGpuAllocations) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{41}
}

func (x *VirtualGpuAllocations) GetAllocations() map[string]*VirtualGpuAllocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

// @Deprecated: this should eventually be merged with the updated/unified ModifyClusterNodes API.
type VirtualGpuAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIDs []string `protobuf:"bytes,1,rep,name=deviceIDs,proto3" json:"deviceIDs,omitempty"`
}

func (x *VirtualGpuAllocation) Reset() {
	*x = VirtualGpuAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGpuAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGpuAllocation) ProtoMessage() {}

func (x *VirtualGpuAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGpuAllocation.ProtoReflect.Descriptor instead.
func (*VirtualGpuAllocation) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{42}
}

func (x *VirtualGpuAllocation) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

// @Deprecated: this should eventually be merged with the updated/unified ModifyClusterNodes API.
type SetVirtualGPUsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value              int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	KubernetesNodeName string `protobuf:"bytes,2,opt,name=kubernetesNodeName,proto3" json:"kubernetesNodeName,omitempty"`
}

func (x *SetVirtualGPUsRequest) Reset() {
	*x = SetVirtualGPUsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVirtualGPUsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVirtualGPUsRequest) ProtoMessage() {}

func (x *SetVirtualGPUsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVirtualGPUsRequest.ProtoReflect.Descriptor instead.
func (*SetVirtualGPUsRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{43}
}

func (x *SetVirtualGPUsRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SetVirtualGPUsRequest) GetKubernetesNodeName() string {
	if x != nil {
		return x.KubernetesNodeName
	}
	return ""
}

// NumNodesResponse is returned by the GetNumNodes gRPC function.
type NumNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NumNodes returns the number of nodes in the Cluster.
	NumNodes int32 `protobuf:"varint,1,opt,name=numNodes,proto3" json:"numNodes,omitempty"`
	// NodeType is the type of node, as there can be either Kubernetes nodes or Docker nodes.
	NodeType string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
}

func (x *NumNodesResponse) Reset() {
	*x = NumNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumNodesResponse) ProtoMessage() {}

func (x *NumNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumNodesResponse.ProtoReflect.Descriptor instead.
func (*NumNodesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{44}
}

func (x *NumNodesResponse) GetNumNodes() int32 {
	if x != nil {
		return x.NumNodes
	}
	return 0
}

func (x *NumNodesResponse) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

// Encapsulates the current vGPU (or "deflated GPU") resource usage on a particular node.
// @Deprecated: this should eventually be merged with the updated/unified ModifyClusterNodes API.
type VirtualGpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalVirtualGPUs     int32 `protobuf:"varint,1,opt,name=totalVirtualGPUs,proto3" json:"totalVirtualGPUs,omitempty"`
	AllocatedVirtualGPUs int32 `protobuf:"varint,2,opt,name=allocatedVirtualGPUs,proto3" json:"allocatedVirtualGPUs,omitempty"`
	FreeVirtualGPUs      int32 `protobuf:"varint,3,opt,name=freeVirtualGPUs,proto3" json:"freeVirtualGPUs,omitempty"`
}

func (x *VirtualGpuInfo) Reset() {
	*x = VirtualGpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualGpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualGpuInfo) ProtoMessage() {}

func (x *VirtualGpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualGpuInfo.ProtoReflect.Descriptor instead.
func (*VirtualGpuInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{45}
}

func (x *VirtualGpuInfo) GetTotalVirtualGPUs() int32 {
	if x != nil {
		return x.TotalVirtualGPUs
	}
	return 0
}

func (x *VirtualGpuInfo) GetAllocatedVirtualGPUs() int32 {
	if x != nil {
		return x.AllocatedVirtualGPUs
	}
	return 0
}

func (x *VirtualGpuInfo) GetFreeVirtualGPUs() int32 {
	if x != nil {
		return x.FreeVirtualGPUs
	}
	return 0
}

// Encapsulates the current GPU resource usage on a particular node.
// @Deprecated: this should eventually be merged with the updated/unified ModifyClusterNodes API.
type GpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecGPUs              int32  `protobuf:"varint,1,opt,name=specGPUs,proto3" json:"specGPUs,omitempty"`                           // The total number of GPUs configured/present on this node.
	IdleGPUs              int32  `protobuf:"varint,2,opt,name=idleGPUs,proto3" json:"idleGPUs,omitempty"`                           // The number of GPUs that are uncommitted and therefore available on this node. This quantity is equal to specGPUs - committedGPUs.
	CommittedGPUs         int32  `protobuf:"varint,3,opt,name=committedGPUs,proto3" json:"committedGPUs,omitempty"`                 // The number of GPUs that are actively committed and allocated to replicas that are scheduled onto this node.
	PendingGPUs           int32  `protobuf:"varint,4,opt,name=pendingGPUs,proto3" json:"pendingGPUs,omitempty"`                     // The sum of the outstanding GPUs of all replicas scheduled onto this node. Pending GPUs are not allocated or committed to a particular replica yet. The time at which resources are actually committed to a replica depends upon the policy being used. In some cases, they're committed immediately. In other cases, they're committed only when the replica is actively training.
	NumPendingAllocations int32  `protobuf:"varint,5,opt,name=numPendingAllocations,proto3" json:"numPendingAllocations,omitempty"` // Number of individual allocations consisting of GPUs that have NOT been fully committed to a kernel.
	NumAllocations        int32  `protobuf:"varint,6,opt,name=numAllocations,proto3" json:"numAllocations,omitempty"`               // Number of individual allocations such that the GPUs have been committed to a container.
	GpuSchedulerID        string `protobuf:"bytes,7,opt,name=gpuSchedulerID,proto3" json:"gpuSchedulerID,omitempty"`                // Unique ID of the gpu scheduler (which is a component of a local daemon) that is reporting these metrics.
	LocalDaemonID         string `protobuf:"bytes,8,opt,name=localDaemonID,proto3" json:"localDaemonID,omitempty"`                  // Unique ID of the associated local daemon.
}

func (x *GpuInfo) Reset() {
	*x = GpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuInfo) ProtoMessage() {}

func (x *GpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuInfo.ProtoReflect.Descriptor instead.
func (*GpuInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{46}
}

func (x *GpuInfo) GetSpecGPUs() int32 {
	if x != nil {
		return x.SpecGPUs
	}
	return 0
}

func (x *GpuInfo) GetIdleGPUs() int32 {
	if x != nil {
		return x.IdleGPUs
	}
	return 0
}

func (x *GpuInfo) GetCommittedGPUs() int32 {
	if x != nil {
		return x.CommittedGPUs
	}
	return 0
}

func (x *GpuInfo) GetPendingGPUs() int32 {
	if x != nil {
		return x.PendingGPUs
	}
	return 0
}

func (x *GpuInfo) GetNumPendingAllocations() int32 {
	if x != nil {
		return x.NumPendingAllocations
	}
	return 0
}

func (x *GpuInfo) GetNumAllocations() int32 {
	if x != nil {
		return x.NumAllocations
	}
	return 0
}

func (x *GpuInfo) GetGpuSchedulerID() string {
	if x != nil {
		return x.GpuSchedulerID
	}
	return ""
}

func (x *GpuInfo) GetLocalDaemonID() string {
	if x != nil {
		return x.LocalDaemonID
	}
	return ""
}

// The input for starting a kernel replica.
type KernelReplicaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kernel                    *KernelSpec `protobuf:"bytes,1,opt,name=kernel,proto3" json:"kernel,omitempty"`
	ReplicaId                 int32       `protobuf:"varint,2,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	NumReplicas               int32       `protobuf:"varint,3,opt,name=numReplicas,proto3" json:"numReplicas,omitempty"`
	Replicas                  []string    `protobuf:"bytes,4,rep,name=replicas,proto3" json:"replicas,omitempty"`
	Join                      bool        `protobuf:"varint,5,opt,name=join,proto3" json:"join,omitempty"`
	PersistentId              *string     `protobuf:"bytes,6,opt,name=persistentId,proto3,oneof" json:"persistentId,omitempty"`
	DockerModeKernelDebugPort int32       `protobuf:"varint,7,opt,name=dockerModeKernelDebugPort,proto3" json:"dockerModeKernelDebugPort,omitempty"`
	WorkloadId                string      `protobuf:"bytes,8,opt,name=workloadId,proto3" json:"workloadId,omitempty"`
}

func (x *KernelReplicaSpec) Reset() {
	*x = KernelReplicaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelReplicaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelReplicaSpec) ProtoMessage() {}

func (x *KernelReplicaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelReplicaSpec.ProtoReflect.Descriptor instead.
func (*KernelReplicaSpec) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{47}
}

func (x *KernelReplicaSpec) GetKernel() *KernelSpec {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *KernelReplicaSpec) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *KernelReplicaSpec) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *KernelReplicaSpec) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *KernelReplicaSpec) GetJoin() bool {
	if x != nil {
		return x.Join
	}
	return false
}

func (x *KernelReplicaSpec) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

func (x *KernelReplicaSpec) GetDockerModeKernelDebugPort() int32 {
	if x != nil {
		return x.DockerModeKernelDebugPort
	}
	return 0
}

func (x *KernelReplicaSpec) GetWorkloadId() string {
	if x != nil {
		return x.WorkloadId
	}
	return ""
}

type ResourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    int32   `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`        // In 1/1000 core.
	Memory float32 `protobuf:"fixed32,2,opt,name=memory,proto3" json:"memory,omitempty"` // In MB.
	Gpu    int32   `protobuf:"varint,3,opt,name=gpu,proto3" json:"gpu,omitempty"`        // Number of GPUs.
	Vram   float32 `protobuf:"fixed32,4,opt,name=vram,proto3" json:"vram,omitempty"`     // Amount of VRAM in GB.
}

func (x *ResourceSpec) Reset() {
	*x = ResourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpec) ProtoMessage() {}

func (x *ResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpec.ProtoReflect.Descriptor instead.
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{48}
}

func (x *ResourceSpec) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceSpec) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ResourceSpec) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *ResourceSpec) GetVram() float32 {
	if x != nil {
		return x.Vram
	}
	return 0
}

// The kernel id.
type KernelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Restart      *bool   `protobuf:"varint,2,opt,name=restart,proto3,oneof" json:"restart,omitempty"`
	PersistentId *string `protobuf:"bytes,3,opt,name=persistentId,proto3,oneof" json:"persistentId,omitempty"`
}

func (x *KernelId) Reset() {
	*x = KernelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelId) ProtoMessage() {}

func (x *KernelId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelId.ProtoReflect.Descriptor instead.
func (*KernelId) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{49}
}

func (x *KernelId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KernelId) GetRestart() bool {
	if x != nil && x.Restart != nil {
		return *x.Restart
	}
	return false
}

func (x *KernelId) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

// The parameters for migration
type ReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId     string `protobuf:"bytes,1,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	ReplicaId    int32  `protobuf:"varint,2,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	PersistentId string `protobuf:"bytes,3,opt,name=persistentId,proto3" json:"persistentId,omitempty"`
}

func (x *ReplicaInfo) Reset() {
	*x = ReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaInfo) ProtoMessage() {}

func (x *ReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaInfo.ProtoReflect.Descriptor instead.
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{50}
}

func (x *ReplicaInfo) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *ReplicaInfo) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *ReplicaInfo) GetPersistentId() string {
	if x != nil {
		return x.PersistentId
	}
	return ""
}

type MigrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetReplica *ReplicaInfo `protobuf:"bytes,1,opt,name=targetReplica,proto3" json:"targetReplica,omitempty"`
	TargetNodeId  *string      `protobuf:"bytes,2,opt,name=targetNodeId,proto3,oneof" json:"targetNodeId,omitempty"`
}

func (x *MigrationRequest) Reset() {
	*x = MigrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationRequest) ProtoMessage() {}

func (x *MigrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationRequest.ProtoReflect.Descriptor instead.
func (*MigrationRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{51}
}

func (x *MigrationRequest) GetTargetReplica() *ReplicaInfo {
	if x != nil {
		return x.TargetReplica
	}
	return nil
}

func (x *MigrationRequest) GetTargetNodeId() string {
	if x != nil && x.TargetNodeId != nil {
		return *x.TargetNodeId
	}
	return ""
}

type SmrReadyNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelId     string `protobuf:"bytes,1,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	ReplicaId    int32  `protobuf:"varint,2,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	PersistentId string `protobuf:"bytes,3,opt,name=persistentId,proto3" json:"persistentId,omitempty"`
	Address      string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SmrReadyNotification) Reset() {
	*x = SmrReadyNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmrReadyNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmrReadyNotification) ProtoMessage() {}

func (x *SmrReadyNotification) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmrReadyNotification.ProtoReflect.Descriptor instead.
func (*SmrReadyNotification) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{52}
}

func (x *SmrReadyNotification) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *SmrReadyNotification) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *SmrReadyNotification) GetPersistentId() string {
	if x != nil {
		return x.PersistentId
	}
	return ""
}

func (x *SmrReadyNotification) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// The replica id.
type ReplicaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReplicaId) Reset() {
	*x = ReplicaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaId) ProtoMessage() {}

func (x *ReplicaId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaId.ProtoReflect.Descriptor instead.
func (*ReplicaId) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{53}
}

func (x *ReplicaId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PrepareToMigrateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	KernelId string `protobuf:"bytes,2,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
	DataDir  string `protobuf:"bytes,3,opt,name=dataDir,proto3" json:"dataDir,omitempty"`
}

func (x *PrepareToMigrateResponse) Reset() {
	*x = PrepareToMigrateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareToMigrateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareToMigrateResponse) ProtoMessage() {}

func (x *PrepareToMigrateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareToMigrateResponse.ProtoReflect.Descriptor instead.
func (*PrepareToMigrateResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{54}
}

func (x *PrepareToMigrateResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrepareToMigrateResponse) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *PrepareToMigrateResponse) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

type MigrateKernelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *MigrateKernelResponse) Reset() {
	*x = MigrateKernelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateKernelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateKernelResponse) ProtoMessage() {}

func (x *MigrateKernelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateKernelResponse.ProtoReflect.Descriptor instead.
func (*MigrateKernelResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{55}
}

func (x *MigrateKernelResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MigrateKernelResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// Similar to ReplicaInfo, but instead of a persistentId field, this has a hostname field.
type ReplicaInfoWithAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	KernelId string `protobuf:"bytes,3,opt,name=kernelId,proto3" json:"kernelId,omitempty"`
}

func (x *ReplicaInfoWithAddr) Reset() {
	*x = ReplicaInfoWithAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaInfoWithAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaInfoWithAddr) ProtoMessage() {}

func (x *ReplicaInfoWithAddr) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaInfoWithAddr.ProtoReflect.Descriptor instead.
func (*ReplicaInfoWithAddr) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{56}
}

func (x *ReplicaInfoWithAddr) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReplicaInfoWithAddr) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ReplicaInfoWithAddr) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

// The kernel spec.
type KernelSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                           // The kernel id.
	Session         string        `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`                 // The id of session associated with the kernel manager.
	Argv            []string      `protobuf:"bytes,3,rep,name=argv,proto3" json:"argv,omitempty"`                       // Command line arguments to be passed to the kernel Python process upon starting it.
	SignatureScheme string        `protobuf:"bytes,4,opt,name=signatureScheme,proto3" json:"signatureScheme,omitempty"` // The signature scheme to use.
	Key             string        `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`                         // The key to use for signing messages.
	ResourceSpec    *ResourceSpec `protobuf:"bytes,6,opt,name=resourceSpec,proto3" json:"resourceSpec,omitempty"`       // Resource requirements of the kernel.
	WorkloadId      string        `protobuf:"bytes,7,opt,name=workloadId,proto3" json:"workloadId,omitempty"`
}

func (x *KernelSpec) Reset() {
	*x = KernelSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelSpec) ProtoMessage() {}

func (x *KernelSpec) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelSpec.ProtoReflect.Descriptor instead.
func (*KernelSpec) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{57}
}

func (x *KernelSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KernelSpec) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *KernelSpec) GetArgv() []string {
	if x != nil {
		return x.Argv
	}
	return nil
}

func (x *KernelSpec) GetSignatureScheme() string {
	if x != nil {
		return x.SignatureScheme
	}
	return ""
}

func (x *KernelSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KernelSpec) GetResourceSpec() *ResourceSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *KernelSpec) GetWorkloadId() string {
	if x != nil {
		return x.WorkloadId
	}
	return ""
}

// The connection info for a kernel.
type KernelConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`                    // The IP address of the kernel.
	Transport       string `protobuf:"bytes,2,opt,name=transport,proto3" json:"transport,omitempty"`      // The transport protocol to use.
	ControlPort     int32  `protobuf:"varint,3,opt,name=controlPort,proto3" json:"controlPort,omitempty"` // The port for control messages.
	ShellPort       int32  `protobuf:"varint,4,opt,name=shellPort,proto3" json:"shellPort,omitempty"`     // The port for shell messages.
	StdinPort       int32  `protobuf:"varint,5,opt,name=stdinPort,proto3" json:"stdinPort,omitempty"`     // The port for stdin messages.
	HbPort          int32  `protobuf:"varint,6,opt,name=hbPort,proto3" json:"hbPort,omitempty"`           // The port for heartbeat messages.
	IopubPort       int32  `protobuf:"varint,7,opt,name=iopubPort,proto3" json:"iopubPort,omitempty"`     // The port for iopub messages (for the pub socket).
	IosubPort       int32  `protobuf:"varint,8,opt,name=iosubPort,proto3" json:"iosubPort,omitempty"`     // The port for iopub messages (for the sub socket).
	AckPort         int32  `protobuf:"varint,9,opt,name=ackPort,proto3" json:"ackPort,omitempty"`
	SignatureScheme string `protobuf:"bytes,10,opt,name=signatureScheme,proto3" json:"signatureScheme,omitempty"` // The signature scheme to use.
	Key             string `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`                         // The key to use for signing messages.
}

func (x *KernelConnectionInfo) Reset() {
	*x = KernelConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelConnectionInfo) ProtoMessage() {}

func (x *KernelConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelConnectionInfo.ProtoReflect.Descriptor instead.
func (*KernelConnectionInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{58}
}

func (x *KernelConnectionInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *KernelConnectionInfo) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *KernelConnectionInfo) GetControlPort() int32 {
	if x != nil {
		return x.ControlPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetShellPort() int32 {
	if x != nil {
		return x.ShellPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetStdinPort() int32 {
	if x != nil {
		return x.StdinPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetHbPort() int32 {
	if x != nil {
		return x.HbPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetIopubPort() int32 {
	if x != nil {
		return x.IopubPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetIosubPort() int32 {
	if x != nil {
		return x.IosubPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetAckPort() int32 {
	if x != nil {
		return x.AckPort
	}
	return 0
}

func (x *KernelConnectionInfo) GetSignatureScheme() string {
	if x != nil {
		return x.SignatureScheme
	}
	return ""
}

func (x *KernelConnectionInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Used as an argument to the Cluster Gateway's NotifyKernelRegistered RPC.
type KernelRegistrationNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionInfo     *KernelConnectionInfo `protobuf:"bytes,1,opt,name=connectionInfo,proto3" json:"connectionInfo,omitempty"`         // Connection information of the kernel.
	KernelId           string                `protobuf:"bytes,2,opt,name=kernelId,proto3" json:"kernelId,omitempty"`                     // ID of the Kernel.
	SessionId          string                `protobuf:"bytes,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                   // ID of the associated Session.
	HostId             string                `protobuf:"bytes,4,opt,name=hostId,proto3" json:"hostId,omitempty"`                         // The ID of the LocalDaemonClient associated with this Host. It's basically the ID of the LocalDaemon.
	ReplicaId          int32                 `protobuf:"varint,5,opt,name=replicaId,proto3" json:"replicaId,omitempty"`                  // The SMR replica ID.
	KernelIp           string                `protobuf:"bytes,6,opt,name=kernelIp,proto3" json:"kernelIp,omitempty"`                     // The hostname of the kernel itself (not its LocalDaemon).
	PodOrContainerName string                `protobuf:"bytes,7,opt,name=podOrContainerName,proto3" json:"podOrContainerName,omitempty"` // The name of the Pod hosting the kernel container.
	NodeName           string                `protobuf:"bytes,8,opt,name=nodeName,proto3" json:"nodeName,omitempty"`                     // Name of the node that the Pod is running on.
	ResourceSpec       *ResourceSpec         `protobuf:"bytes,9,opt,name=resourceSpec,proto3" json:"resourceSpec,omitempty"`             // ResourceSpec of the kernel.
	Cpu                int32                 `protobuf:"varint,10,opt,name=cpu,proto3" json:"cpu,omitempty"`                             // In 1/100 core.
	Memory             int32                 `protobuf:"varint,11,opt,name=memory,proto3" json:"memory,omitempty"`                       // In MB.
	Gpu                int32                 `protobuf:"varint,12,opt,name=gpu,proto3" json:"gpu,omitempty"`                             // Number of GPUs.
	DockerContainerId  string                `protobuf:"bytes,13,opt,name=dockerContainerId,proto3" json:"dockerContainerId,omitempty"`  // Docker ID of the container. Only populated in Docker mode.
	NotificationId     string                `protobuf:"bytes,14,opt,name=notificationId,proto3" json:"notificationId,omitempty"`
}

func (x *KernelRegistrationNotification) Reset() {
	*x = KernelRegistrationNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelRegistrationNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelRegistrationNotification) ProtoMessage() {}

func (x *KernelRegistrationNotification) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelRegistrationNotification.ProtoReflect.Descriptor instead.
func (*KernelRegistrationNotification) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{59}
}

func (x *KernelRegistrationNotification) GetConnectionInfo() *KernelConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *KernelRegistrationNotification) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *KernelRegistrationNotification) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KernelRegistrationNotification) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *KernelRegistrationNotification) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *KernelRegistrationNotification) GetKernelIp() string {
	if x != nil {
		return x.KernelIp
	}
	return ""
}

func (x *KernelRegistrationNotification) GetPodOrContainerName() string {
	if x != nil {
		return x.PodOrContainerName
	}
	return ""
}

func (x *KernelRegistrationNotification) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *KernelRegistrationNotification) GetResourceSpec() *ResourceSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *KernelRegistrationNotification) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *KernelRegistrationNotification) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *KernelRegistrationNotification) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *KernelRegistrationNotification) GetDockerContainerId() string {
	if x != nil {
		return x.DockerContainerId
	}
	return ""
}

func (x *KernelRegistrationNotification) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

// Returned by the Cluster Gateway for the NotifyKernelRegistered RPC.
type KernelRegistrationNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Replicas                        map[int32]string `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SmrPort                         int32            `protobuf:"varint,3,opt,name=smrPort,proto3" json:"smrPort,omitempty"`
	ResourceSpec                    *ResourceSpec    `protobuf:"bytes,4,opt,name=resourceSpec,proto3" json:"resourceSpec,omitempty"`
	ShouldReadDataFromRemoteStorage bool             `protobuf:"varint,5,opt,name=shouldReadDataFromRemoteStorage,proto3" json:"shouldReadDataFromRemoteStorage,omitempty"`
	PersistentId                    *string          `protobuf:"bytes,6,opt,name=persistentId,proto3,oneof" json:"persistentId,omitempty"`
}

func (x *KernelRegistrationNotificationResponse) Reset() {
	*x = KernelRegistrationNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelRegistrationNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelRegistrationNotificationResponse) ProtoMessage() {}

func (x *KernelRegistrationNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelRegistrationNotificationResponse.ProtoReflect.Descriptor instead.
func (*KernelRegistrationNotificationResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{60}
}

func (x *KernelRegistrationNotificationResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KernelRegistrationNotificationResponse) GetReplicas() map[int32]string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *KernelRegistrationNotificationResponse) GetSmrPort() int32 {
	if x != nil {
		return x.SmrPort
	}
	return 0
}

func (x *KernelRegistrationNotificationResponse) GetResourceSpec() *ResourceSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *KernelRegistrationNotificationResponse) GetShouldReadDataFromRemoteStorage() bool {
	if x != nil {
		return x.ShouldReadDataFromRemoteStorage
	}
	return false
}

func (x *KernelRegistrationNotificationResponse) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

// The status of a kernel.
type KernelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KernelStatus) Reset() {
	*x = KernelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelStatus) ProtoMessage() {}

func (x *KernelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelStatus.ProtoReflect.Descriptor instead.
func (*KernelStatus) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{61}
}

func (x *KernelStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_api_proto_gateway_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_api_proto_gateway_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_internal_server_api_proto_gateway_proto_rawDescGZIP(), []int{62}
}

var File_internal_server_api_proto_gateway_proto protoreflect.FileDescriptor

var file_internal_server_api_proto_gateway_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x60, 0x0a, 0x22, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x22, 0x71, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x12, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x22, 0x39, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x1d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x5b, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x4e, 0x75,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x19, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xb3, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4e,
	0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x1e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65,
	0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1b, 0x72, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0xff, 0x04, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x43, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x43,
	0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x47, 0x70, 0x75, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x47, 0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x56, 0x52, 0x41, 0x4d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x47, 0x70, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x47, 0x70, 0x75, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x52, 0x41, 0x4d,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x70, 0x75, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x70, 0x75,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x70, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x47, 0x70, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x52, 0x41, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x41, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x77, 0x61, 0x72, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x49, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x77, 0x61, 0x72, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x04,
	0x50, 0x6f, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x88, 0x06,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x3e, 0x0a, 0x1a,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x22, 0x71, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x07,
	0x67, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x4c, 0x0a, 0x0c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb3, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x07, 0x67, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x53, 0x0a, 0x0c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x14, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4a, 0x75, 0x70,
	0x79, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x1f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x50, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22,
	0x31, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x23, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xbf, 0x03, 0x0a,
	0x15, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x10,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x0d, 0x73, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x70, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x70, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x72,
	0x61, 0x6d, 0x47, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x72, 0x61, 0x6d,
	0x47, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70,
	0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x5d, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34,
	0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50,
	0x55, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x47, 0x50, 0x55, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x72, 0x65,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x22, 0xb5, 0x02, 0x0a,
	0x07, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x47, 0x50, 0x55, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x47, 0x50, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x6c, 0x65, 0x47, 0x50, 0x55, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x64, 0x6c, 0x65, 0x47, 0x50, 0x55, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x47, 0x50, 0x55,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x47, 0x50, 0x55, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x47, 0x50, 0x55, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x50, 0x55, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x70, 0x75, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x67, 0x70, 0x75, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0xc8, 0x02, 0x0a, 0x11, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x06, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x5e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x76, 0x72, 0x61, 0x6d, 0x22,
	0x7f, 0x0a, 0x08, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x6b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x27,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x53, 0x6d, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1b, 0x0a, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x22, 0x43, 0x0a, 0x15, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a,
	0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x76, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x76, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x22, 0xcc, 0x02, 0x0a, 0x14, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x64, 0x69,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6f, 0x70, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6f, 0x70, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x69, 0x6f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x6b,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x8c, 0x04, 0x0a, 0x1e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x64, 0x4f, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x6f, 0x64, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa9,
	0x03, 0x0a, 0x26, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6d, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6d, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x39,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0c, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x32, 0x8e, 0x04, 0x0a, 0x0e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2d, 0x0a,
	0x02, 0x49, 0x44, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x6d, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x6d,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x53, 0x6d, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0xb1, 0x0e, 0x0a, 0x12,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x50, 0x61, 0x6e, 0x69,
	0x63, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x12,
	0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1b,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x12, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x50,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50,
	0x55, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1e, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x26,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e,
	0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x1a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1b, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0x4e, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32,
	0x4d, 0x0a, 0x13, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0xd3,
	0x09, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x1a, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53,
	0x70, 0x65, 0x63, 0x1a, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x4b, 0x69, 0x6c, 0x6c, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x11,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x1a, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x2c, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x10, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x1e, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x12, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x22, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x22, 0x00, 0x42, 0x7e, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x73, 0x63, 0x75, 0x73, 0x65, 0x6d, 0x75, 0x61, 0x2e, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x75, 0x73, 0x65, 0x6d,
	0x75, 0x61, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x2d, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_server_api_proto_gateway_proto_rawDescOnce sync.Once
	file_internal_server_api_proto_gateway_proto_rawDescData = file_internal_server_api_proto_gateway_proto_rawDesc
)

func file_internal_server_api_proto_gateway_proto_rawDescGZIP() []byte {
	file_internal_server_api_proto_gateway_proto_rawDescOnce.Do(func() {
		file_internal_server_api_proto_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_server_api_proto_gateway_proto_rawDescData)
	})
	return file_internal_server_api_proto_gateway_proto_rawDescData
}

var file_internal_server_api_proto_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_internal_server_api_proto_gateway_proto_goTypes = []interface{}{
	(*ClusterStatisticsResponse)(nil),              // 0: gateway.ClusterStatisticsResponse
	(*ForceLocalDaemonToReconnectRequest)(nil),     // 1: gateway.ForceLocalDaemonToReconnectRequest
	(*QueryMessageRequest)(nil),                    // 2: gateway.QueryMessageRequest
	(*QueryMessageResponse)(nil),                   // 3: gateway.QueryMessageResponse
	(*ClusterAgeResponse)(nil),                     // 4: gateway.ClusterAgeResponse
	(*GetLocalDaemonNodeIDsResponse)(nil),          // 5: gateway.GetLocalDaemonNodeIDsResponse
	(*DashboardRegistrationResponse)(nil),          // 6: gateway.DashboardRegistrationResponse
	(*RemoveSpecificClusterNodesRequest)(nil),      // 7: gateway.RemoveSpecificClusterNodesRequest
	(*RemoveSpecificClusterNodesResponse)(nil),     // 8: gateway.RemoveSpecificClusterNodesResponse
	(*RemoveClusterNodesRequest)(nil),              // 9: gateway.RemoveClusterNodesRequest
	(*RemoveClusterNodesResponse)(nil),             // 10: gateway.RemoveClusterNodesResponse
	(*AddClusterNodesRequest)(nil),                 // 11: gateway.AddClusterNodesRequest
	(*AddClusterNodesResponse)(nil),                // 12: gateway.AddClusterNodesResponse
	(*ModifyClusterNodesRequest)(nil),              // 13: gateway.ModifyClusterNodesRequest
	(*ModifyClusterNodesResponse)(nil),             // 14: gateway.ModifyClusterNodesResponse
	(*SetNumClusterNodesRequest)(nil),              // 15: gateway.SetNumClusterNodesRequest
	(*SetNumClusterNodesResponse)(nil),             // 16: gateway.SetNumClusterNodesResponse
	(*GetVirtualDockerNodesResponse)(nil),          // 17: gateway.GetVirtualDockerNodesResponse
	(*RemoteStorageDefinition)(nil),                // 18: gateway.RemoteStorageDefinition
	(*VirtualDockerNode)(nil),                      // 19: gateway.VirtualDockerNode
	(*DockerContainer)(nil),                        // 20: gateway.DockerContainer
	(*GetDockerSwarmNodesResponse)(nil),            // 21: gateway.GetDockerSwarmNodesResponse
	(*DockerSwarmNode)(nil),                        // 22: gateway.DockerSwarmNode
	(*Pong)(nil),                                   // 23: gateway.Pong
	(*RequestTrace)(nil),                           // 24: gateway.RequestTrace
	(*PingInstruction)(nil),                        // 25: gateway.PingInstruction
	(*Notification)(nil),                           // 26: gateway.Notification
	(*ResourceSpecRegistration)(nil),               // 27: gateway.ResourceSpecRegistration
	(*ClusterActualGpuInfo)(nil),                   // 28: gateway.ClusterActualGpuInfo
	(*ClusterVirtualGpuInfo)(nil),                  // 29: gateway.ClusterVirtualGpuInfo
	(*JupyterKernelReplica)(nil),                   // 30: gateway.JupyterKernelReplica
	(*DistributedJupyterKernel)(nil),               // 31: gateway.DistributedJupyterKernel
	(*ListKernelsResponse)(nil),                    // 32: gateway.ListKernelsResponse
	(*ProvisionerId)(nil),                          // 33: gateway.ProvisionerId
	(*HostSpec)(nil),                               // 34: gateway.HostSpec
	(*HostId)(nil),                                 // 35: gateway.HostId
	(*KernelNotification)(nil),                     // 36: gateway.KernelNotification
	(*ReconnectToGatewayRequest)(nil),              // 37: gateway.ReconnectToGatewayRequest
	(*NodeResourcesSnapshotWithContainers)(nil),    // 38: gateway.NodeResourcesSnapshotWithContainers
	(*NodeResourcesSnapshot)(nil),                  // 39: gateway.NodeResourcesSnapshot
	(*ResourcesSnapshot)(nil),                      // 40: gateway.ResourcesSnapshot
	(*VirtualGpuAllocations)(nil),                  // 41: gateway.VirtualGpuAllocations
	(*VirtualGpuAllocation)(nil),                   // 42: gateway.VirtualGpuAllocation
	(*SetVirtualGPUsRequest)(nil),                  // 43: gateway.SetVirtualGPUsRequest
	(*NumNodesResponse)(nil),                       // 44: gateway.NumNodesResponse
	(*VirtualGpuInfo)(nil),                         // 45: gateway.VirtualGpuInfo
	(*GpuInfo)(nil),                                // 46: gateway.GpuInfo
	(*KernelReplicaSpec)(nil),                      // 47: gateway.KernelReplicaSpec
	(*ResourceSpec)(nil),                           // 48: gateway.ResourceSpec
	(*KernelId)(nil),                               // 49: gateway.KernelId
	(*ReplicaInfo)(nil),                            // 50: gateway.ReplicaInfo
	(*MigrationRequest)(nil),                       // 51: gateway.MigrationRequest
	(*SmrReadyNotification)(nil),                   // 52: gateway.SmrReadyNotification
	(*ReplicaId)(nil),                              // 53: gateway.ReplicaId
	(*PrepareToMigrateResponse)(nil),               // 54: gateway.PrepareToMigrateResponse
	(*MigrateKernelResponse)(nil),                  // 55: gateway.MigrateKernelResponse
	(*ReplicaInfoWithAddr)(nil),                    // 56: gateway.ReplicaInfoWithAddr
	(*KernelSpec)(nil),                             // 57: gateway.KernelSpec
	(*KernelConnectionInfo)(nil),                   // 58: gateway.KernelConnectionInfo
	(*KernelRegistrationNotification)(nil),         // 59: gateway.KernelRegistrationNotification
	(*KernelRegistrationNotificationResponse)(nil), // 60: gateway.KernelRegistrationNotificationResponse
	(*KernelStatus)(nil),                           // 61: gateway.KernelStatus
	(*Void)(nil),                                   // 62: gateway.Void
	nil,                                            // 63: gateway.ClusterActualGpuInfo.GpuInfoEntry
	nil,                                            // 64: gateway.ClusterVirtualGpuInfo.GpuInfoEntry
	nil,                                            // 65: gateway.VirtualGpuAllocations.AllocationsEntry
	nil,                                            // 66: gateway.KernelRegistrationNotificationResponse.ReplicasEntry
	(*timestamppb.Timestamp)(nil),                  // 67: google.protobuf.Timestamp
}
var file_internal_server_api_proto_gateway_proto_depIdxs = []int32{
	24, // 0: gateway.QueryMessageResponse.requestTraces:type_name -> gateway.RequestTrace
	19, // 1: gateway.GetVirtualDockerNodesResponse.nodes:type_name -> gateway.VirtualDockerNode
	20, // 2: gateway.VirtualDockerNode.containers:type_name -> gateway.DockerContainer
	67, // 3: gateway.VirtualDockerNode.createdAt:type_name -> google.protobuf.Timestamp
	22, // 4: gateway.GetDockerSwarmNodesResponse.nodes:type_name -> gateway.DockerSwarmNode
	24, // 5: gateway.Pong.requestTraces:type_name -> gateway.RequestTrace
	48, // 6: gateway.ResourceSpecRegistration.resourceSpec:type_name -> gateway.ResourceSpec
	63, // 7: gateway.ClusterActualGpuInfo.gpuInfo:type_name -> gateway.ClusterActualGpuInfo.GpuInfoEntry
	64, // 8: gateway.ClusterVirtualGpuInfo.gpuInfo:type_name -> gateway.ClusterVirtualGpuInfo.GpuInfoEntry
	57, // 9: gateway.DistributedJupyterKernel.kernelSpec:type_name -> gateway.KernelSpec
	30, // 10: gateway.DistributedJupyterKernel.replicas:type_name -> gateway.JupyterKernelReplica
	31, // 11: gateway.ListKernelsResponse.kernels:type_name -> gateway.DistributedJupyterKernel
	39, // 12: gateway.NodeResourcesSnapshotWithContainers.resourceSnapshot:type_name -> gateway.NodeResourcesSnapshot
	50, // 13: gateway.NodeResourcesSnapshotWithContainers.containers:type_name -> gateway.ReplicaInfo
	67, // 14: gateway.NodeResourcesSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	40, // 15: gateway.NodeResourcesSnapshot.idleResources:type_name -> gateway.ResourcesSnapshot
	40, // 16: gateway.NodeResourcesSnapshot.pendingResources:type_name -> gateway.ResourcesSnapshot
	40, // 17: gateway.NodeResourcesSnapshot.committedResources:type_name -> gateway.ResourcesSnapshot
	40, // 18: gateway.NodeResourcesSnapshot.specResources:type_name -> gateway.ResourcesSnapshot
	65, // 19: gateway.VirtualGpuAllocations.allocations:type_name -> gateway.VirtualGpuAllocations.AllocationsEntry
	57, // 20: gateway.KernelReplicaSpec.kernel:type_name -> gateway.KernelSpec
	50, // 21: gateway.MigrationRequest.targetReplica:type_name -> gateway.ReplicaInfo
	48, // 22: gateway.KernelSpec.resourceSpec:type_name -> gateway.ResourceSpec
	58, // 23: gateway.KernelRegistrationNotification.connectionInfo:type_name -> gateway.KernelConnectionInfo
	48, // 24: gateway.KernelRegistrationNotification.resourceSpec:type_name -> gateway.ResourceSpec
	66, // 25: gateway.KernelRegistrationNotificationResponse.replicas:type_name -> gateway.KernelRegistrationNotificationResponse.ReplicasEntry
	48, // 26: gateway.KernelRegistrationNotificationResponse.resourceSpec:type_name -> gateway.ResourceSpec
	46, // 27: gateway.ClusterActualGpuInfo.GpuInfoEntry.value:type_name -> gateway.GpuInfo
	45, // 28: gateway.ClusterVirtualGpuInfo.GpuInfoEntry.value:type_name -> gateway.VirtualGpuInfo
	42, // 29: gateway.VirtualGpuAllocations.AllocationsEntry.value:type_name -> gateway.VirtualGpuAllocation
	62, // 30: gateway.ClusterGateway.ID:input_type -> gateway.Void
	35, // 31: gateway.ClusterGateway.RemoveHost:input_type -> gateway.HostId
	51, // 32: gateway.ClusterGateway.MigrateKernelReplica:input_type -> gateway.MigrationRequest
	59, // 33: gateway.ClusterGateway.NotifyKernelRegistered:input_type -> gateway.KernelRegistrationNotification
	52, // 34: gateway.ClusterGateway.SmrReady:input_type -> gateway.SmrReadyNotification
	50, // 35: gateway.ClusterGateway.SmrNodeAdded:input_type -> gateway.ReplicaInfo
	26, // 36: gateway.ClusterGateway.Notify:input_type -> gateway.Notification
	62, // 37: gateway.ClusterGateway.PingGateway:input_type -> gateway.Void
	62, // 38: gateway.DistributedCluster.InducePanic:input_type -> gateway.Void
	62, // 39: gateway.DistributedCluster.ClusterAge:input_type -> gateway.Void
	62, // 40: gateway.DistributedCluster.SpoofNotifications:input_type -> gateway.Void
	62, // 41: gateway.DistributedCluster.Ping:input_type -> gateway.Void
	25, // 42: gateway.DistributedCluster.PingKernel:input_type -> gateway.PingInstruction
	62, // 43: gateway.DistributedCluster.ListKernels:input_type -> gateway.Void
	43, // 44: gateway.DistributedCluster.SetTotalVirtualGPUs:input_type -> gateway.SetVirtualGPUsRequest
	62, // 45: gateway.DistributedCluster.GetClusterActualGpuInfo:input_type -> gateway.Void
	62, // 46: gateway.DistributedCluster.GetClusterVirtualGpuInfo:input_type -> gateway.Void
	51, // 47: gateway.DistributedCluster.MigrateKernelReplica:input_type -> gateway.MigrationRequest
	49, // 48: gateway.DistributedCluster.FailNextExecution:input_type -> gateway.KernelId
	62, // 49: gateway.DistributedCluster.RegisterDashboard:input_type -> gateway.Void
	62, // 50: gateway.DistributedCluster.GetVirtualDockerNodes:input_type -> gateway.Void
	62, // 51: gateway.DistributedCluster.GetDockerSwarmNodes:input_type -> gateway.Void
	62, // 52: gateway.DistributedCluster.GetNumNodes:input_type -> gateway.Void
	15, // 53: gateway.DistributedCluster.SetNumClusterNodes:input_type -> gateway.SetNumClusterNodesRequest
	11, // 54: gateway.DistributedCluster.AddClusterNodes:input_type -> gateway.AddClusterNodesRequest
	7,  // 55: gateway.DistributedCluster.RemoveSpecificClusterNodes:input_type -> gateway.RemoveSpecificClusterNodesRequest
	9,  // 56: gateway.DistributedCluster.RemoveClusterNodes:input_type -> gateway.RemoveClusterNodesRequest
	13, // 57: gateway.DistributedCluster.ModifyClusterNodes:input_type -> gateway.ModifyClusterNodesRequest
	62, // 58: gateway.DistributedCluster.GetLocalDaemonNodeIDs:input_type -> gateway.Void
	2,  // 59: gateway.DistributedCluster.QueryMessage:input_type -> gateway.QueryMessageRequest
	1,  // 60: gateway.DistributedCluster.ForceLocalDaemonToReconnect:input_type -> gateway.ForceLocalDaemonToReconnectRequest
	62, // 61: gateway.DistributedCluster.ClusterStatistics:input_type -> gateway.Void
	26, // 62: gateway.ClusterDashboard.SendNotification:input_type -> gateway.Notification
	36, // 63: gateway.KernelErrorReporter.Notify:input_type -> gateway.KernelNotification
	35, // 64: gateway.LocalGateway.SetID:input_type -> gateway.HostId
	57, // 65: gateway.LocalGateway.StartKernel:input_type -> gateway.KernelSpec
	47, // 66: gateway.LocalGateway.StartKernelReplica:input_type -> gateway.KernelReplicaSpec
	49, // 67: gateway.LocalGateway.GetKernelStatus:input_type -> gateway.KernelId
	49, // 68: gateway.LocalGateway.KillKernel:input_type -> gateway.KernelId
	49, // 69: gateway.LocalGateway.StopKernel:input_type -> gateway.KernelId
	25, // 70: gateway.LocalGateway.PingKernel:input_type -> gateway.PingInstruction
	49, // 71: gateway.LocalGateway.WaitKernel:input_type -> gateway.KernelId
	62, // 72: gateway.LocalGateway.SetClose:input_type -> gateway.Void
	56, // 73: gateway.LocalGateway.AddReplica:input_type -> gateway.ReplicaInfoWithAddr
	56, // 74: gateway.LocalGateway.UpdateReplicaAddr:input_type -> gateway.ReplicaInfoWithAddr
	50, // 75: gateway.LocalGateway.PrepareToMigrate:input_type -> gateway.ReplicaInfo
	62, // 76: gateway.LocalGateway.ResourcesSnapshot:input_type -> gateway.Void
	62, // 77: gateway.LocalGateway.GetActualGpuInfo:input_type -> gateway.Void
	62, // 78: gateway.LocalGateway.GetVirtualGpuInfo:input_type -> gateway.Void
	43, // 79: gateway.LocalGateway.SetTotalVirtualGPUs:input_type -> gateway.SetVirtualGPUsRequest
	62, // 80: gateway.LocalGateway.GetVirtualGpuAllocations:input_type -> gateway.Void
	49, // 81: gateway.LocalGateway.YieldNextExecution:input_type -> gateway.KernelId
	37, // 82: gateway.LocalGateway.ReconnectToGateway:input_type -> gateway.ReconnectToGatewayRequest
	33, // 83: gateway.ClusterGateway.ID:output_type -> gateway.ProvisionerId
	62, // 84: gateway.ClusterGateway.RemoveHost:output_type -> gateway.Void
	55, // 85: gateway.ClusterGateway.MigrateKernelReplica:output_type -> gateway.MigrateKernelResponse
	60, // 86: gateway.ClusterGateway.NotifyKernelRegistered:output_type -> gateway.KernelRegistrationNotificationResponse
	62, // 87: gateway.ClusterGateway.SmrReady:output_type -> gateway.Void
	62, // 88: gateway.ClusterGateway.SmrNodeAdded:output_type -> gateway.Void
	62, // 89: gateway.ClusterGateway.Notify:output_type -> gateway.Void
	62, // 90: gateway.ClusterGateway.PingGateway:output_type -> gateway.Void
	62, // 91: gateway.DistributedCluster.InducePanic:output_type -> gateway.Void
	4,  // 92: gateway.DistributedCluster.ClusterAge:output_type -> gateway.ClusterAgeResponse
	62, // 93: gateway.DistributedCluster.SpoofNotifications:output_type -> gateway.Void
	23, // 94: gateway.DistributedCluster.Ping:output_type -> gateway.Pong
	23, // 95: gateway.DistributedCluster.PingKernel:output_type -> gateway.Pong
	32, // 96: gateway.DistributedCluster.ListKernels:output_type -> gateway.ListKernelsResponse
	45, // 97: gateway.DistributedCluster.SetTotalVirtualGPUs:output_type -> gateway.VirtualGpuInfo
	28, // 98: gateway.DistributedCluster.GetClusterActualGpuInfo:output_type -> gateway.ClusterActualGpuInfo
	29, // 99: gateway.DistributedCluster.GetClusterVirtualGpuInfo:output_type -> gateway.ClusterVirtualGpuInfo
	55, // 100: gateway.DistributedCluster.MigrateKernelReplica:output_type -> gateway.MigrateKernelResponse
	62, // 101: gateway.DistributedCluster.FailNextExecution:output_type -> gateway.Void
	6,  // 102: gateway.DistributedCluster.RegisterDashboard:output_type -> gateway.DashboardRegistrationResponse
	17, // 103: gateway.DistributedCluster.GetVirtualDockerNodes:output_type -> gateway.GetVirtualDockerNodesResponse
	21, // 104: gateway.DistributedCluster.GetDockerSwarmNodes:output_type -> gateway.GetDockerSwarmNodesResponse
	44, // 105: gateway.DistributedCluster.GetNumNodes:output_type -> gateway.NumNodesResponse
	16, // 106: gateway.DistributedCluster.SetNumClusterNodes:output_type -> gateway.SetNumClusterNodesResponse
	12, // 107: gateway.DistributedCluster.AddClusterNodes:output_type -> gateway.AddClusterNodesResponse
	8,  // 108: gateway.DistributedCluster.RemoveSpecificClusterNodes:output_type -> gateway.RemoveSpecificClusterNodesResponse
	10, // 109: gateway.DistributedCluster.RemoveClusterNodes:output_type -> gateway.RemoveClusterNodesResponse
	14, // 110: gateway.DistributedCluster.ModifyClusterNodes:output_type -> gateway.ModifyClusterNodesResponse
	5,  // 111: gateway.DistributedCluster.GetLocalDaemonNodeIDs:output_type -> gateway.GetLocalDaemonNodeIDsResponse
	3,  // 112: gateway.DistributedCluster.QueryMessage:output_type -> gateway.QueryMessageResponse
	62, // 113: gateway.DistributedCluster.ForceLocalDaemonToReconnect:output_type -> gateway.Void
	0,  // 114: gateway.DistributedCluster.ClusterStatistics:output_type -> gateway.ClusterStatisticsResponse
	62, // 115: gateway.ClusterDashboard.SendNotification:output_type -> gateway.Void
	62, // 116: gateway.KernelErrorReporter.Notify:output_type -> gateway.Void
	35, // 117: gateway.LocalGateway.SetID:output_type -> gateway.HostId
	58, // 118: gateway.LocalGateway.StartKernel:output_type -> gateway.KernelConnectionInfo
	58, // 119: gateway.LocalGateway.StartKernelReplica:output_type -> gateway.KernelConnectionInfo
	61, // 120: gateway.LocalGateway.GetKernelStatus:output_type -> gateway.KernelStatus
	62, // 121: gateway.LocalGateway.KillKernel:output_type -> gateway.Void
	62, // 122: gateway.LocalGateway.StopKernel:output_type -> gateway.Void
	23, // 123: gateway.LocalGateway.PingKernel:output_type -> gateway.Pong
	61, // 124: gateway.LocalGateway.WaitKernel:output_type -> gateway.KernelStatus
	62, // 125: gateway.LocalGateway.SetClose:output_type -> gateway.Void
	62, // 126: gateway.LocalGateway.AddReplica:output_type -> gateway.Void
	62, // 127: gateway.LocalGateway.UpdateReplicaAddr:output_type -> gateway.Void
	54, // 128: gateway.LocalGateway.PrepareToMigrate:output_type -> gateway.PrepareToMigrateResponse
	38, // 129: gateway.LocalGateway.ResourcesSnapshot:output_type -> gateway.NodeResourcesSnapshotWithContainers
	46, // 130: gateway.LocalGateway.GetActualGpuInfo:output_type -> gateway.GpuInfo
	45, // 131: gateway.LocalGateway.GetVirtualGpuInfo:output_type -> gateway.VirtualGpuInfo
	45, // 132: gateway.LocalGateway.SetTotalVirtualGPUs:output_type -> gateway.VirtualGpuInfo
	41, // 133: gateway.LocalGateway.GetVirtualGpuAllocations:output_type -> gateway.VirtualGpuAllocations
	62, // 134: gateway.LocalGateway.YieldNextExecution:output_type -> gateway.Void
	62, // 135: gateway.LocalGateway.ReconnectToGateway:output_type -> gateway.Void
	83, // [83:136] is the sub-list for method output_type
	30, // [30:83] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_internal_server_api_proto_gateway_proto_init() }
func file_internal_server_api_proto_gateway_proto_init() {
	if File_internal_server_api_proto_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_server_api_proto_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceLocalDaemonToReconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalDaemonNodeIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSpecificClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSpecificClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNumClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNumClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualDockerNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDockerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDockerSwarmNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerSwarmNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSpecRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterActualGpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVirtualGpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JupyterKernelReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributedJupyterKernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKernelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconnectToGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResourcesSnapshotWithContainers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResourcesSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGpuAllocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGpuAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVirtualGPUsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualGpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelReplicaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmrReadyNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareToMigrateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateKernelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaInfoWithAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelRegistrationNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelRegistrationNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_api_proto_gateway_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_server_api_proto_gateway_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_internal_server_api_proto_gateway_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_internal_server_api_proto_gateway_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_internal_server_api_proto_gateway_proto_msgTypes[60].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_server_api_proto_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_internal_server_api_proto_gateway_proto_goTypes,
		DependencyIndexes: file_internal_server_api_proto_gateway_proto_depIdxs,
		MessageInfos:      file_internal_server_api_proto_gateway_proto_msgTypes,
	}.Build()
	File_internal_server_api_proto_gateway_proto = out.File
	file_internal_server_api_proto_gateway_proto_rawDesc = nil
	file_internal_server_api_proto_gateway_proto_goTypes = nil
	file_internal_server_api_proto_gateway_proto_depIdxs = nil
}
